{
  "hash": "c6c68cdd9e24e025372e83762c799a88",
  "result": {
    "markdown": "---\ntitle: \"ChatGPT fail: Sieve of Eratosthenes\"\ndescription: |\n  ChatGPT writes buggy R in a quick test\ndate: \"2022-12-06\"\ncategories: [AI, R, ChatGPT, data science]\nimage: badcode.png\n---\n\n\n<div>\n<div style=\"float: left; padding-right: 20px; margin-top: 0.5em\">\n![](badcode.png){width=\"150\"}\n</div>\nMy flirtation with [ChatGPT](https://openai.com/blog/chatgpt/) continues.\n\nA few days ago I had some fun asking it to compose [emotive sonnets about data science](/posts/2022-12-02-sonnets/). That was entertaining, and I maintain that anyone who isn't recognizing this moment as a major inflection point for authoring content of any kind isn't paying attention. And yes, this extends to writing code. Some people are (rightly) fearful that AI will be able to write better code than humans very soon, for approximately a nothingth of the cost, and that we might actually be there now. Stackoverflow has [temporarily banned ChatGPT](https://meta.stackoverflow.com/questions/421831/temporary-policy-chatgpt-is-banned), though how they're going to police that remains a bit of a mystery to me.\n\nThere may be some divine symmetry to AI systems obsoleting the human programmers that spawned them, but I don't think we're quite there yet. I asked ChatGPT to implement a Sieve of Eratosthenes in R, and this was its confident response:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to implement Sieve of Eratosthenes\nsieve <- function(n) {\n  # Create a boolean array \"prime[0..n]\" and\n  # initialize all entries it as true.\n  # A value in prime[i] will finally be\n  # false if i is Not a prime, else true.\n  prime <- rep(TRUE, n + 1)\n\n  # Set entries for 0 and 1 to false as\n  # they are not prime numbers\n  prime[1] <- FALSE\n  prime[2] <- TRUE\n\n  # Loop through the array and set the\n  # value of each element to false if\n  # it is not a prime number.\n  for (p in 2:n) {\n    if (prime[p]) {\n      # Update all multiples of p\n      for (i in 2 * p:n) {\n        prime[i] <- FALSE\n      }\n    }\n  }\n\n  # Return a vector of prime numbers\n  return(which(prime))\n}\n```\n:::\n\n\nPretty impressive. Concise, clean, and *commented* (well, with a caps typo), with a paragraph of explanatory text below it describing how it works, it initially put a chill down my spine. \n\nUntil a few seconds later, when I noticed some obvious issues: \n\n```r\n  # Set entries for 0 and 1 to false as\n  # they are not prime numbers\n  prime[1] <- FALSE\n  prime[2] <- TRUE\n```\n\nThere are at least 2 bugs here. The first is that R vectors are one-based, not zero-based, and the code uses the numbers being tested as primes as the index for the vector; the code is actually OK, but the comment is wrong. The second is even with the off-by-one index, the code doesn't do what the comment describes (set two values to false). Also, the second line is redundant because the entire vector has already been initialized to TRUE. And finally, of course, when run, this code produces incorrect output:\n\n```r\n> sieve(100)\n [1]   2   3   5   7   9  11  13  15  17  19  21  23  25  27  29  31  33  35  37  39  41  43  45\n[24]  47  49  51  53  55  57  59  61  63  65  67  69  71  73  75  77  79  81  83  85  87  89  91\n[47]  93  95  97  99 101\n```\n\nStarts off OK, but then 9 appears, and it goes downhill rapidly after that.\n\nIt's easy enough to fix:\n\n- start the array with `FALSE` for 1, since 1 is not prime (logic error)\n- use the rounded square root of `n` for the upper boundary, not `n` (logic error)\n- use a `seq` function iterating by `p`, starting at `p^2`, to mark the composites; the R code `for (i in 2 * p:n)` doesn't do that (language error).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsieve <- function(n) {\n  # Create a boolean array \"prime[1..n]\" and\n  # initialize all entries it as true, except\n  # for prime[1] = FALSE.\n  # A value in prime[i] will finally be\n  # false if i is not a prime, else true.\n  # 1 is not a prime number; initialize it to FALSE.\n  prime <- c(FALSE, rep(TRUE, n - 1))\n  \n  # Loop through the array and set the\n  # value of each element to false if\n  # it is not a prime number.\n  for (p in 2:floor(sqrt(n))) {\n    if (prime[p]) {\n      # Update all multiples of p not exceeding n, starting at p^2\n      for (i in seq(p ^ 2, n, by = p)) {\n        prime[i] <- FALSE\n      }\n    }\n  }\n  \n  # Return a vector of prime numbers\n  return(which(prime))\n}\n```\n:::\n\n\nThe point of this isn't to flex on first-year computer-science R; the point is that the code is presented authoritatively by the AI (even with their general disclaimers that things may be wrong), and since a lot of what passes for programming these days seems to be blindly copying and pasting code fragments from Stackoverflow, this is another vector where that could happen.\n\nSo: it's impressive that it got as close as it did; what worries me is how authoritatively it presented its buggy code. People are going to trust these systems, even if they shouldn't, and since it's likely to be used by people who aren't experts, errors like those described above aren't likely to be easily caught. I'm sure the quality will improve in time -- these are the early days -- but where is this all leading? The bot was so confident in [its assertion that C is a dynamically-typed language](/posts/2022-12-02-sonnets/) the other day that it made me doubt myself after decades of C at the center of my brain's programming-language orientation. I hadn't studied it formally in school; had I been wrong about it all along?\n\nInterestingly, the python code the bot produced for the sieve was just fine (I just changed the limit for output comparison):\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# MAX_PRIMES = 100000  # maximum number of prime numbers to find\nMAX_PRIMES = 100  # maximum number of prime numbers to find\n\n# Sieve of Eratosthenes\n# Finds all prime numbers up to MAX_PRIMES using the Sieve of Eratosthenes algorithm\ndef sieve_of_eratosthenes():\n  primes = [True] * MAX_PRIMES  # list to store prime numbers\n\n  # 1 is not a prime number\n  primes[1] = False\n\n  # sieve algorithm\n  for i in range(2, int(MAX_PRIMES ** 0.5) + 1):\n    if primes[i]:\n      for j in range(i ** 2, MAX_PRIMES, i):\n        primes[j] = False\n\n  # print the prime numbers\n  for i in range(1, MAX_PRIMES):\n    if primes[i]:\n      print(i)\n\nsieve_of_eratosthenes()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97\n```\n:::\n:::\n\n\nExciting times. This technology is amazingly promising, and it's going to change the world. But the flaws are as dangerous as the strengths are thrilling. Here we go.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}