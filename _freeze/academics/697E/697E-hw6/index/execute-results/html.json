{
  "hash": "68588ae77e43a99b6de9d8f677658116",
  "result": {
    "markdown": "---\ntitle: \"Homework 6: Clustering and Blockmodels in the Florentine Wedding dataset\"\ndescription: |\n  Yet more ways to look at the Florence data.\ndate: 2022-03-26\ncategories: [r, social networks]\n---\n\n\n\n\nThis week we will look at structural equivalence and blockmodels in the Florentine wedding data set. Structural equivalence is a way to look at subsections of a network that identifies nodes with similar connections to other nodes, such as parents of the same child, or children of the same parent.\n\nWe begin, as usual, by loading the Florence data in both the igraph and statnet packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the statnet version\ndata(\"florentine\", package = \"ergm\")\nflo_stat <- flomarriage\n\n# Load the igraph version\ndata(flo)\n# If the matrix is symmetric, it is undirected.\n# https://mathworld.wolfram.com/UndirectedGraph.html\n# We know the Florence marriage network is undirected, but code is always better.\nflo_ig <- graph_from_adjacency_matrix(flo, mode = ifelse(isSymmetric(flo), \"undirected\", \"directed\"))\n```\n:::\n\n\nThe structural equivalence object is created with the default parameters, except for forcing the undirected mode. Printing the resulting object shows its creation parameters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflo_stat.se <- sna::equiv.clust(flo_stat, mode = \"graph\")\nprint(flo_stat.se)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPosition Clustering:\n\n\tEquivalence function: sedist \n\tEquivalence metric: hamming \n\tCluster method: complete \n\tGraph order: 16 \n```\n:::\n:::\n\n\nThe first thing to do is get a visual look at the default clustering dendrogram.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(flo_stat.se, labels = flo_stat.se$glabels)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nWhat does this show us? Well, as with nearly every other observation we've looked at in this data set, one of the most obvious observations is how the Medici are once again separate from the other nodes (families) in the set. The fact that they are alone in the top left shows that they are dissimilar to all other nodes in the network.\n\nIf we look at the lower left corner of the graph, cam see that the Peruzzi and Strozzi families are structurally similar. Let's look again at the basic network diagram, highlighting these families:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1235)\n\noranges <- colorRampPalette(c(\"gold\", \"skyblue\"))\ncol <- oranges(5)\n\nvcol <- rep(\"gray80\", vcount(flo_ig))\nvcol[which(V(flo_ig)$name == \"Peruzzi\")] <- col[1]\nvcol[which(V(flo_ig)$name == \"Strozzi\")] <- col[1]\n\nplot(\n  flo_ig,\n  layout = layout_components(flo_ig),\n  edge.arrow.mode = 0,\n  vertex.label.color = \"black\",\n  vertex.shape = \"circle\",\n  vertex.color = vcol,\n  vertex.label.font = 2,\n  main = \"Florence interfamily marriages, 1282-1500\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\nThey are not identical - there are no structurally identical nodes in this network - but they are similar. They both connect to the Bischeri and Castellani families.^[(Note that their connections to each other are not part of this calculation; it is only assessing nodes they have in common with each other.] The Strozzi also connect to the Ridolfi. This difference is represented by the height of the connector lines in the cluster dendrogram above.\n\nThree other pairs of nodes show the same level of similarity:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1235)\n\nvcol <- rep(\"gray80\", vcount(flo_ig))\nvcol[which(V(flo_ig)$name == \"Peruzzi\")] <- col[1]\nvcol[which(V(flo_ig)$name == \"Strozzi\")] <- col[1]\nvcol[which(V(flo_ig)$name == \"Acciaiuoli\")] <- col[2]\nvcol[which(V(flo_ig)$name == \"Barbadori\")] <- col[2]\nvcol[which(V(flo_ig)$name == \"Ginori\")] <- col[3]\nvcol[which(V(flo_ig)$name == \"Pucci\")] <- col[3]\nvcol[which(V(flo_ig)$name == \"Pazzi\")] <- col[4]\nvcol[which(V(flo_ig)$name == \"Salviati\")] <- col[4]\n\nplot(\n  flo_ig,\n  layout = layout_components(flo_ig),\n  edge.arrow.mode = 0,\n  vertex.label.color = \"black\",\n  vertex.shape = \"circle\",\n  vertex.color = vcol,\n  vertex.label.font = 2,\n  main = \"Florence interfamily marriages, 1282-1500\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThis seems believable, overall; the least intuitive impression on this graph is that the Pucci family, which is the network's lone isolate, is similar to the Ginori family on the other side of the graph, which connects only to the Albizzi family; nodes with similar structural equivalence are usually direct neighbors, since they *are* structurally equivalent due to their shared connections to other nodes.\n\nWhere this begins to be a bit less convincing is in the triad of the Tornabuoni, Albizzi and Lamberteschi families:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1235)\n\nvcol <- rep(\"gray80\", vcount(flo_ig))\nvcol[which(V(flo_ig)$name == \"Tornabuoni\")] <- col[5]\nvcol[which(V(flo_ig)$name == \"Albizzi\")] <- col[5]\nvcol[which(V(flo_ig)$name == \"Lamberteschi\")] <- col[5]\n\nplot(\n  flo_ig,\n  layout = layout_components(flo_ig),\n  edge.arrow.mode = 0,\n  vertex.label.color = \"black\",\n  vertex.shape = \"circle\",\n  vertex.color = vcol,\n  vertex.label.font = 2,\n  main = \"Florence interfamily marriages, 1282-1500\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\nThe Tornabuoni and Albizzi seem reasonably similar, sharing 2 other connections with each other, but the Lamberteschi share only one with either of them (the Guadagni). It seems like a bit of a stretch to suggest that they are of the same level of similarity to each other, but it could be argued that the Lamberteschi are more similar to the Tornabuoni and Albizzi than to any other nodes in the network.\n\nFinally, it's instructive to look at the three nodes with no structurally similar peers: the Medici, Guadagni and Ridolfi:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1235)\n\nvcol <- rep(\"gray80\", vcount(flo_ig))\nvcol[which(V(flo_ig)$name == \"Medici\")] <- col[1]\nvcol[which(V(flo_ig)$name == \"Guadagni\")] <- col[3]\nvcol[which(V(flo_ig)$name == \"Ridolfi\")] <- col[5]\n\nplot(\n  flo_ig,\n  layout = layout_components(flo_ig),\n  edge.arrow.mode = 0,\n  vertex.label.color = \"black\",\n  vertex.shape = \"circle\",\n  vertex.color = vcol,\n  vertex.label.font = 2,\n  main = \"Florence interfamily marriages, 1282-1500\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\nThese nodes are plainly quite different from any other nodes in the network, in terms of their connections.\n\nIf we wanted another way to describe the diagram - already quite complex despite the data set's relatively small size - one way we might seek to do that is by breaking the diagram into a manageable number of sub-clusters that are similar to each other. And one way to achieve that is to use rectangular clustering based on height, describing the similarity threshold we feel is appropriate. For example, if we set the height to 8, we get:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(flo_stat.se, labels = flo_stat.se$glabels)\nrect.hclust(flo_stat.se$cluster, h = 8)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThis results in four clusters containing data (and two empty clusters). If we plot the results, we can see the clusters whose components the algorithm considers more similar to each other than to other nodes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvcol <- rep(\"gray80\", vcount(flo_ig))\nvcol[which(V(flo_ig)$name == \"Peruzzi\")] <- col[1]\nvcol[which(V(flo_ig)$name == \"Strozzi\")] <- col[1]\nvcol[which(V(flo_ig)$name == \"Bischeri\")] <- col[1]\nvcol[which(V(flo_ig)$name == \"Castellani\")] <- col[1]\nvcol[which(V(flo_ig)$name == \"Ridolfi\")] <- col[2]\nvcol[which(V(flo_ig)$name == \"Acciaiuoli\")] <- col[3]\nvcol[which(V(flo_ig)$name == \"Barbadori\")] <- col[3]\nvcol[which(V(flo_ig)$name == \"Albizzi\")] <- col[3]\nvcol[which(V(flo_ig)$name == \"Tornabuoni\")] <- col[3]\nvcol[which(V(flo_ig)$name == \"Lamberteschi\")] <- col[3]\nvcol[which(V(flo_ig)$name == \"Ginori\")] <- col[4]\nvcol[which(V(flo_ig)$name == \"Pucci\")] <- col[4]\nvcol[which(V(flo_ig)$name == \"Pazzi\")] <- col[4]\nvcol[which(V(flo_ig)$name == \"Salviati\")] <- col[4]\n\nplot(\n  flo_ig,\n  layout = layout_components(flo_ig),\n  edge.arrow.mode = 0,\n  vertex.label.color = \"black\",\n  vertex.shape = \"circle\",\n  vertex.color = vcol,\n  vertex.label.font = 2,\n  main = \"Florence interfamily marriages, 1282-1500\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nOn the whole, this appears to be a pretty reasonable partitioning of the network into clusters of structurally similar nodes. As we observed earlier, the Medici and Guadagni families are distinct enough not to have any structurally equivalent peers in the network, and the Ridolfi, while itself also lacking structurally similar peers, is still more similar to the other clusters than it is to the Medici or Guadagni.\n\n### Blockmodel partitions\n\nFinally, a brief look at blockmodel partitions, which are another way to visualize the clusters described above. Keeping the same height parameter of 8 from the above diagram, we can generate a blockmodel partition from the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflo_stat.bm <- blockmodel(flo_stat, flo_stat.se, h = 8, mode = \"graph\")\nflo_stat.bm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nNetwork Blockmodel:\n\nBlock membership:\n\n  Acciaiuoli      Albizzi    Barbadori     Bischeri   Castellani       Ginori \n           1            1            1            2            2            1 \n    Guadagni Lamberteschi       Medici        Pazzi      Peruzzi        Pucci \n           3            1            4            1            2            1 \n     Ridolfi     Salviati      Strozzi   Tornabuoni \n           1            1            2            1 \n\nReduced form blockmodel:\n\n\t Acciaiuoli Albizzi Barbadori Bischeri Castellani Ginori Guadagni Lamberteschi Medici Pazzi Peruzzi Pucci Ridolfi Salviati Strozzi Tornabuoni \n           Block 1   Block 2 Block 3 Block 4\nBlock 1 0.06666667 0.0500000    0.30     0.6\nBlock 2 0.05000000 0.8333333    0.25     0.0\nBlock 3 0.30000000 0.2500000     NaN     0.0\nBlock 4 0.60000000 0.0000000    0.00     NaN\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Code from the tutorial\nplot.block<-function(x=blk_mod, main=NULL, cex.lab=1){\n  plot.sociomatrix(x$blocked.data, labels=list(x$plabels,x$plabels),\n                   main=main, drawlines = FALSE, cex.lab=cex.lab)\n  for (j in 2:length(x$plabels)) if (x$block.membership[j] !=\n                                     x$block.membership[j-1]) \n    abline(v = j - 0.5, h = j - 0.5, lty = 3, xpd=FALSE)\n}\n\nplot.block(flo_stat.bm, cex.lab=.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nTHe four clusters are indicated by the dotted horizontal lines in the diagram; each black box is a connection between the nodes along the left and top axes. The more filled-in a partition is, the more similar the clustered elements are to each other; this is also indicated numerically in the chart above with measures closer to 1.\n\nThe most obvious observations to make here are:\n\n1. The cluster with the highest inner similarity rating is 2, with a numeric rate of 0.83 (on a scale of 0 to 1). This can be interpreted to mean that the Peruzzi, Strozzi, Bischeri and Castallani familes mostly intermarried among each other. (Cousins!)\n\n2. The grouping returned by `rect.hclust` with the same `h` parameter of 8 does not match the grouping returned by `blockmodel` with the same value. It gets the first three groups correct, but all of the remaining nodes are packed together into the fourth group. I suspect this may be a bug in the blockmodel code, related to the fact that there were 4 clusters in the `rect.hclust` code that had data, and 2 without, but blockmodel considered the empty ones as valid, and then stopped at 4. This will need to be investigated.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}