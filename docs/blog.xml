<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>slinberg.net</title>
<link>https://slinberg.net/blog.html</link>
<atom:link href="https://slinberg.net/blog.xml" rel="self" type="application/rss+xml"/>
<description>Steve Linberg</description>
<generator>quarto-1.1.251</generator>
<lastBuildDate>Tue, 06 Dec 2022 05:00:00 GMT</lastBuildDate>
<item>
  <title>ChatGPT fail: Sieve of Eratosthenes</title>
  <dc:creator>Steve Linberg</dc:creator>
  <link>https://slinberg.net/posts/2022-12-06-chatgpt-sieve/index.html</link>
  <description><![CDATA[ 



<div>
<div style="float: left; padding-right: 20px; margin-top: 0.5em">
<p><img src="https://slinberg.net/posts/2022-12-06-chatgpt-sieve/badcode.png" class="img-fluid" width="150"></p>
</div>
<p>My flirtation with <a href="https://openai.com/blog/chatgpt/">ChatGPT</a> continues.</p>
<p>A few days ago I had some fun asking it to compose <a href="../../posts/2022-12-02-sonnets/">emotive sonnets about data science</a>. That was entertaining, and I maintain that anyone who isn’t recognizing this moment as a major inflection point for authoring content of any kind isn’t paying attention. And yes, this extends to writing code. Some people are (rightly) fearful that AI will be able to write better code than humans very soon, for approximately a nothingth of the cost, and that we might actually be there now. Stackoverflow has <a href="https://meta.stackoverflow.com/questions/421831/temporary-policy-chatgpt-is-banned">temporarily banned ChatGPT</a>, though how they’re going to police that remains a bit of a mystery to me.</p>
<p>There may be some divine symmetry to AI systems obsoleting the human programmers that spawned them, but I don’t think we’re quite there yet. I asked ChatGPT to implement a Sieve of Eratosthenes in R, and this was its confident response:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Function to implement Sieve of Eratosthenes</span></span>
<span id="cb1-2">sieve <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(n) {</span>
<span id="cb1-3">  <span class="co" style="color: #5E5E5E;"># Create a boolean array "prime[0..n]" and</span></span>
<span id="cb1-4">  <span class="co" style="color: #5E5E5E;"># initialize all entries it as true.</span></span>
<span id="cb1-5">  <span class="co" style="color: #5E5E5E;"># A value in prime[i] will finally be</span></span>
<span id="cb1-6">  <span class="co" style="color: #5E5E5E;"># false if i is Not a prime, else true.</span></span>
<span id="cb1-7">  prime <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">TRUE</span>, n <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9">  <span class="co" style="color: #5E5E5E;"># Set entries for 0 and 1 to false as</span></span>
<span id="cb1-10">  <span class="co" style="color: #5E5E5E;"># they are not prime numbers</span></span>
<span id="cb1-11">  prime[<span class="dv" style="color: #AD0000;">1</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb1-12">  prime[<span class="dv" style="color: #AD0000;">2</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb1-13"></span>
<span id="cb1-14">  <span class="co" style="color: #5E5E5E;"># Loop through the array and set the</span></span>
<span id="cb1-15">  <span class="co" style="color: #5E5E5E;"># value of each element to false if</span></span>
<span id="cb1-16">  <span class="co" style="color: #5E5E5E;"># it is not a prime number.</span></span>
<span id="cb1-17">  <span class="cf" style="color: #003B4F;">for</span> (p <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span>n) {</span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;">if</span> (prime[p]) {</span>
<span id="cb1-19">      <span class="co" style="color: #5E5E5E;"># Update all multiples of p</span></span>
<span id="cb1-20">      <span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">*</span> p<span class="sc" style="color: #5E5E5E;">:</span>n) {</span>
<span id="cb1-21">        prime[i] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb1-22">      }</span>
<span id="cb1-23">    }</span>
<span id="cb1-24">  }</span>
<span id="cb1-25"></span>
<span id="cb1-26">  <span class="co" style="color: #5E5E5E;"># Return a vector of prime numbers</span></span>
<span id="cb1-27">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">which</span>(prime))</span>
<span id="cb1-28">}</span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;"># Test the function by finding the prime numbers</span></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;"># less than or equal to 100</span></span>
<span id="cb1-32"><span class="fu" style="color: #4758AB;">sieve</span>(<span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]   2   3   5   7   9  11  13  15  17  19  21  23  25  27  29  31  33  35  37
[20]  39  41  43  45  47  49  51  53  55  57  59  61  63  65  67  69  71  73  75
[39]  77  79  81  83  85  87  89  91  93  95  97  99 101</code></pre>
</div>
</div>
<p>Pretty impressive. Concise, clean, and <em>commented</em> (well, with a caps typo), with a paragraph of explanatory text below it describing how it works, it initially put a chill down my spine.</p>
<p>Until a few seconds later, when I noticed some obvious issues:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">  <span class="co" style="color: #5E5E5E;"># Set entries for 0 and 1 to false as</span></span>
<span id="cb3-2">  <span class="co" style="color: #5E5E5E;"># they are not prime numbers</span></span>
<span id="cb3-3">  prime[<span class="dv" style="color: #AD0000;">1</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb3-4">  prime[<span class="dv" style="color: #AD0000;">2</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">TRUE</span></span></code></pre></div>
<p>There are at least 2 bugs here. The first is that R vectors are one-based, not zero-based, and the code uses the numbers being tested as primes as the index for the vector; the code is actually OK, but the comment is wrong. The second is even with the off-by-one index, the code doesn’t do what the comment describes (set two values to false). Also, the second line is redundant because the entire vector has already been initialized to TRUE. And finally, of course, when run, this code produces incorrect output:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">sieve</span>(<span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb4-2"> [<span class="dv" style="color: #AD0000;">1</span>]   <span class="dv" style="color: #AD0000;">2</span>   <span class="dv" style="color: #AD0000;">3</span>   <span class="dv" style="color: #AD0000;">5</span>   <span class="dv" style="color: #AD0000;">7</span>   <span class="dv" style="color: #AD0000;">9</span>  <span class="dv" style="color: #AD0000;">11</span>  <span class="dv" style="color: #AD0000;">13</span>  <span class="dv" style="color: #AD0000;">15</span>  <span class="dv" style="color: #AD0000;">17</span>  <span class="dv" style="color: #AD0000;">19</span>  <span class="dv" style="color: #AD0000;">21</span>  <span class="dv" style="color: #AD0000;">23</span>  <span class="dv" style="color: #AD0000;">25</span>  <span class="dv" style="color: #AD0000;">27</span>  <span class="dv" style="color: #AD0000;">29</span>  <span class="dv" style="color: #AD0000;">31</span>  <span class="dv" style="color: #AD0000;">33</span>  <span class="dv" style="color: #AD0000;">35</span>  <span class="dv" style="color: #AD0000;">37</span>  <span class="dv" style="color: #AD0000;">39</span>  <span class="dv" style="color: #AD0000;">41</span>  <span class="dv" style="color: #AD0000;">43</span>  <span class="dv" style="color: #AD0000;">45</span></span>
<span id="cb4-3">[<span class="dv" style="color: #AD0000;">24</span>]  <span class="dv" style="color: #AD0000;">47</span>  <span class="dv" style="color: #AD0000;">49</span>  <span class="dv" style="color: #AD0000;">51</span>  <span class="dv" style="color: #AD0000;">53</span>  <span class="dv" style="color: #AD0000;">55</span>  <span class="dv" style="color: #AD0000;">57</span>  <span class="dv" style="color: #AD0000;">59</span>  <span class="dv" style="color: #AD0000;">61</span>  <span class="dv" style="color: #AD0000;">63</span>  <span class="dv" style="color: #AD0000;">65</span>  <span class="dv" style="color: #AD0000;">67</span>  <span class="dv" style="color: #AD0000;">69</span>  <span class="dv" style="color: #AD0000;">71</span>  <span class="dv" style="color: #AD0000;">73</span>  <span class="dv" style="color: #AD0000;">75</span>  <span class="dv" style="color: #AD0000;">77</span>  <span class="dv" style="color: #AD0000;">79</span>  <span class="dv" style="color: #AD0000;">81</span>  <span class="dv" style="color: #AD0000;">83</span>  <span class="dv" style="color: #AD0000;">85</span>  <span class="dv" style="color: #AD0000;">87</span>  <span class="dv" style="color: #AD0000;">89</span>  <span class="dv" style="color: #AD0000;">91</span></span>
<span id="cb4-4">[<span class="dv" style="color: #AD0000;">47</span>]  <span class="dv" style="color: #AD0000;">93</span>  <span class="dv" style="color: #AD0000;">95</span>  <span class="dv" style="color: #AD0000;">97</span>  <span class="dv" style="color: #AD0000;">99</span> <span class="dv" style="color: #AD0000;">101</span></span></code></pre></div>
<p>Starts off OK, but then 9 appears, and it goes downhill rapidly after that.</p>
<p>It’s easy enough to fix:</p>
<ul>
<li>start the array with <code>FALSE</code> for 1, since 1 is not prime (logic error)</li>
<li>use the rounded square root of <code>n</code> for the upper boundary, not <code>n</code> (logic error)</li>
<li>use a <code>seq</code> function iterating by <code>p</code>, starting at <code>p^2</code>, to mark the composites; the R code <code>for (i in 2 * p:n)</code> doesn’t do that (language error).</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">sieve <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(n) {</span>
<span id="cb5-2">  <span class="co" style="color: #5E5E5E;"># Create a boolean array "prime[1..n]" and</span></span>
<span id="cb5-3">  <span class="co" style="color: #5E5E5E;"># initialize all entries it as true, except</span></span>
<span id="cb5-4">  <span class="co" style="color: #5E5E5E;"># for prime[1] = FALSE.</span></span>
<span id="cb5-5">  <span class="co" style="color: #5E5E5E;"># A value in prime[i] will finally be</span></span>
<span id="cb5-6">  <span class="co" style="color: #5E5E5E;"># false if i is not a prime, else true.</span></span>
<span id="cb5-7">  <span class="co" style="color: #5E5E5E;"># 1 is not a prime number; initialize it to FALSE.</span></span>
<span id="cb5-8">  prime <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">FALSE</span>, <span class="fu" style="color: #4758AB;">rep</span>(<span class="cn" style="color: #8f5902;">TRUE</span>, n <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb5-9">  </span>
<span id="cb5-10">  <span class="co" style="color: #5E5E5E;"># Loop through the array and set the</span></span>
<span id="cb5-11">  <span class="co" style="color: #5E5E5E;"># value of each element to false if</span></span>
<span id="cb5-12">  <span class="co" style="color: #5E5E5E;"># it is not a prime number.</span></span>
<span id="cb5-13">  <span class="cf" style="color: #003B4F;">for</span> (p <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">floor</span>(<span class="fu" style="color: #4758AB;">sqrt</span>(n))) {</span>
<span id="cb5-14">    <span class="cf" style="color: #003B4F;">if</span> (prime[p]) {</span>
<span id="cb5-15">      <span class="co" style="color: #5E5E5E;"># Update all multiples of p not exceeding n, starting at p^2</span></span>
<span id="cb5-16">      <span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="fu" style="color: #4758AB;">seq</span>(p <span class="sc" style="color: #5E5E5E;">^</span> <span class="dv" style="color: #AD0000;">2</span>, n, <span class="at" style="color: #657422;">by =</span> p)) {</span>
<span id="cb5-17">        prime[i] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb5-18">      }</span>
<span id="cb5-19">    }</span>
<span id="cb5-20">  }</span>
<span id="cb5-21">  </span>
<span id="cb5-22">  <span class="co" style="color: #5E5E5E;"># Return a vector of prime numbers</span></span>
<span id="cb5-23">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">which</span>(prime))</span>
<span id="cb5-24">}</span></code></pre></div>
</div>
<p>The point of this isn’t to flex on first-year computer-science R; the point is that the code is presented authoritatively by the AI (even with their general disclaimers that things may be wrong), and since a lot of what passes for programming these days seems to be blindly copying and pasting code fragments from Stackoverflow, this is another vector where that could happen.</p>
<p>So: it’s impressive that it got as close as it did; what worries me is how authoritatively it presented its buggy code. People are going to trust these systems, even if they shouldn’t, and since it’s likely to be used by people who aren’t experts, errors like those described above aren’t likely to be easily caught. I’m sure the quality will improve in time – these are the early days – but where is this all leading? The bot was so confident in <a href="../../posts/2022-12-02-sonnets/">its assertion that C is a dynamically-typed language</a> the other day that it made me doubt myself after decades of C at the center of my brain’s programming-language orientation. I hadn’t studied it formally in school; had I been wrong about it all along?</p>
<p>Interestingly, the python code the bot produced for the sieve was just fine (I just changed the limit for output comparison):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># MAX_PRIMES = 100000  # maximum number of prime numbers to find</span></span>
<span id="cb6-2">MAX_PRIMES <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span>  <span class="co" style="color: #5E5E5E;"># maximum number of prime numbers to find</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;"># Sieve of Eratosthenes</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;"># Finds all prime numbers up to MAX_PRIMES using the Sieve of Eratosthenes algorithm</span></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;">def</span> sieve_of_eratosthenes():</span>
<span id="cb6-7">  primes <span class="op" style="color: #5E5E5E;">=</span> [<span class="va" style="color: #111111;">True</span>] <span class="op" style="color: #5E5E5E;">*</span> MAX_PRIMES  <span class="co" style="color: #5E5E5E;"># list to store prime numbers</span></span>
<span id="cb6-8"></span>
<span id="cb6-9">  <span class="co" style="color: #5E5E5E;"># 1 is not a prime number</span></span>
<span id="cb6-10">  primes[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb6-11"></span>
<span id="cb6-12">  <span class="co" style="color: #5E5E5E;"># sieve algorithm</span></span>
<span id="cb6-13">  <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="bu" style="color: null;">int</span>(MAX_PRIMES <span class="op" style="color: #5E5E5E;">**</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb6-14">    <span class="cf" style="color: #003B4F;">if</span> primes[i]:</span>
<span id="cb6-15">      <span class="cf" style="color: #003B4F;">for</span> j <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(i <span class="op" style="color: #5E5E5E;">**</span> <span class="dv" style="color: #AD0000;">2</span>, MAX_PRIMES, i):</span>
<span id="cb6-16">        primes[j] <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb6-17"></span>
<span id="cb6-18">  <span class="co" style="color: #5E5E5E;"># print the prime numbers</span></span>
<span id="cb6-19">  <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, MAX_PRIMES):</span>
<span id="cb6-20">    <span class="cf" style="color: #003B4F;">if</span> primes[i]:</span>
<span id="cb6-21">      <span class="bu" style="color: null;">print</span>(i)</span>
<span id="cb6-22"></span>
<span id="cb6-23">sieve_of_eratosthenes()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2
3
5
7
11
13
17
19
23
29
31
37
41
43
47
53
59
61
67
71
73
79
83
89
97</code></pre>
</div>
</div>
<p>Exciting times. This technology is amazingly promising, and it’s going to change the world. But the flaws are as dangerous as the strengths are thrilling. Here we go.</p>



</div><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{linberg2022,
  author = {Steve Linberg},
  editor = {},
  title = {ChatGPT Fail: {Sieve} of {Eratosthenes}},
  date = {2022-12-06},
  url = {https://slinberg.net/posts/2022-12-06-chatgpt-sieve},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-linberg2022" class="csl-entry quarto-appendix-citeas">
Steve Linberg. 2022. <span>“ChatGPT Fail: Sieve of Eratosthenes.”</span>
December 6, 2022. <a href="https://slinberg.net/posts/2022-12-06-chatgpt-sieve">https://slinberg.net/posts/2022-12-06-chatgpt-sieve</a>.
</div></div></section></div> ]]></description>
  <category>AI</category>
  <category>R</category>
  <category>ChatGPT</category>
  <category>data science</category>
  <guid>https://slinberg.net/posts/2022-12-06-chatgpt-sieve/index.html</guid>
  <pubDate>Tue, 06 Dec 2022 05:00:00 GMT</pubDate>
  <media:content url="https://slinberg.net/posts/2022-12-06-chatgpt-sieve/badcode.png" medium="image" type="image/png" height="43" width="144"/>
</item>
<item>
  <title>AI Sonnets on Data Science</title>
  <dc:creator>Steve Linberg</dc:creator>
  <link>https://slinberg.net/posts/2022-12-02-sonnets/index.html</link>
  <description><![CDATA[ 



<div>
<div style="float: left; padding-right: 20px; margin-top: 0.5em">
<p><img src="https://slinberg.net/posts/2022-12-02-sonnets/ChatGPT.jpg" class="img-fluid" width="150"></p>
</div>
<p>I’ve been playing around with <a href="https://openai.com/blog/chatgpt/">ChatGPT</a>, which lets you interact with OpenAI’s GPT-3 language model in a chatbot style. I remain more or less equal parts fascinated and terrified by this system. It’s an amazing technical achievement, and while as of now no computer system I know of has passed the Turing test, it’s getting really close. The thing that scares me the most about the GPT-3 system is the certainty with which it says things that aren’t true… I tested it with the question of whether C is statically typed (it is), and this was its response:</p>
</div>
<blockquote class="blockquote">
<p>No, C is not a statically-typed language. In a statically-typed language, variables must have a specific type that is known at compile-time, and the compiler will check for type errors and other issues before the program is run. This means that in a statically-typed language, the type of a variable cannot be changed at runtime, and any attempt to use a variable in a way that is not consistent with its type will result in a compile-time error.</p>
<p>In contrast, C is a dynamically-typed language, which means that the type of a variable is not determined until runtime. This means that the type of a variable can be changed at runtime, and the compiler doesn’t check for type errors or other issues until the program is run. This can make C programs more prone to runtime errors and other issues.</p>
</blockquote>
<p>This was “written” with such confidence that it made me question whether I’ve been wrong about C all these years, for a few minutes at least. I couldn’t remember the last time I tested C’s static typing, and tried (say) assigning an integer value to a <code>char *</code>. Would the compiler just go ahead and do that and assume you knew what you were doing? Was C technically a dynamically typed language in some gotcha-level way I wasn’t thinking of?</p>
<p>Answer: no, of course not. But the way the answer was phrased made me doubt myself.</p>
<section id="a-sonnet-about-data-analytics" class="level2">
<h2 class="anchored" data-anchor-id="a-sonnet-about-data-analytics">A Sonnet About Data Analytics</h2>
<p>Anyway, after I got this out of my system I decided to just play with it. I asked it to write a sonnet about data analytics. This was its response:</p>
<blockquote class="blockquote">
<p>Data analytics is a complex field,<br>
Where numbers and trends are revealed,<br>
With algorithms and tools,<br>
Insights are found and ruled,<br>
A treasure trove of knowledge sealed.</p>
<p>Through data analysis we can see,<br>
Patterns and trends in our history,<br>
From the past we can learn,<br>
And our future discern,<br>
A powerful tool for all to see.</p>
<p>With data we can make predictions,<br>
And take strategic decisions,<br>
From sales to marketing,<br>
Data has a lot to bring,<br>
A valuable asset for all conditions.</p>
<p>So let us embrace data analytics,<br>
And all that it has to give us,<br>
A world of information,<br>
At our fingertips and imagination,<br>
A powerful tool for all of us.</p>
</blockquote>
<p>I thought… that’s not too bad! I wanted to see another, so I said <em>“do it again”</em>. It responded:</p>
<blockquote class="blockquote">
<p>I’m sorry, but I’m not able to generate multiple versions of the same content. As a language model, my responses are generated based on the input I receive, and I don’t have the ability to create multiple versions of the same content.</p>
</blockquote>
<p>OK, fair enough. So you need to vary the input to get different output. I started adding adjectives.</p>
<p><em>“write a sad sonnet about data analytics”</em></p>
</section>
<section id="a-sad-sonnet-about-data-analytics" class="level2">
<h2 class="anchored" data-anchor-id="a-sad-sonnet-about-data-analytics">A Sad Sonnet About Data Analytics</h2>
<blockquote class="blockquote">
<p>Data analytics can be a cruel task,<br>
Filled with numbers that never ask,<br>
Our hearts may be breaking,<br>
But the numbers keep shaking,<br>
Leaving us empty and devoid of any mask.</p>
<p>We pour our hearts into the data,<br>
But it remains cold and uninviting,<br>
No matter how much we try,<br>
It never seems to satisfy,<br>
Leaving us feeling lost and solitary.</p>
<p>The insights we seek elude us still,<br>
As the data remains chill,<br>
Our hopes and dreams shattered,<br>
By the numbers that mattered,<br>
Leaving us alone and feeling ill.&nbsp;</p>
<p>But even in the darkest of days,<br>
We must keep searching for the data’s ways,<br>
For though it may break our hearts,<br>
In the end it imparts,<br>
The knowledge that sets us free from its daze.</p>
</blockquote>
<p>…I sat back heavily. My heart sank. This was utterly tragic. I had no idea data science could be so bleak.</p>
<p>I had to go on.</p>
<p><em>“write an angry sonnet about data analytics”</em></p>
</section>
<section id="an-angry-sonnet-about-data-analytics" class="level2">
<h2 class="anchored" data-anchor-id="an-angry-sonnet-about-data-analytics">An Angry Sonnet About Data Analytics</h2>
<blockquote class="blockquote">
<p>Data analytics, a curse upon us all,<br>
A never-ending stream of numbers and code,<br>
We toil and we labor,<br>
But the data remains unyielding and cold,<br>
Leaving us frustrated and feeling alone.</p>
<p>With each passing day, our frustration grows,<br>
As we struggle to make sense of the data,<br>
It taunts and it teases,<br>
Leaving us feeling like fools,<br>
Our efforts met with nothing but woe.</p>
<p>But we will not be defeated by data,<br>
We will not be broken by its cold embrace,<br>
We will continue to fight,<br>
Until we have unlocked its secrets,<br>
And claimed its insights as our own.</p>
<p>For though it may challenge us,<br>
Data analytics is ours to tame,<br>
And we will not rest,<br>
Until we have conquered its vast domain,<br>
And claimed its power as our own.</p>
</blockquote>
<p>This one, I could definitely relate to.</p>
<p><em>“write an obsequious sonnet about data analytics”</em></p>
</section>
<section id="an-obsequious-sonnet-about-data-analytics" class="level2">
<h2 class="anchored" data-anchor-id="an-obsequious-sonnet-about-data-analytics">An Obsequious Sonnet About Data Analytics</h2>
<blockquote class="blockquote">
<p>Data analytics, a blessing to us all,<br>
A never-ending stream of numbers and code,<br>
We humbly bow before it,<br>
Grateful for its insights and knowledge,<br>
As it guides us on our path to success.</p>
<p>With each passing day, our gratitude grows,<br>
As we learn more and more from the data,<br>
It reveals and it teaches,<br>
Leading us to new heights,<br>
Our efforts rewarded with insights and growth.</p>
<p>We are but humble servants of data,<br>
Eager to do its bidding and follow its lead,<br>
For we know that in its hands,<br>
Lie the keys to our future,<br>
And the power to unlock our greatest potential.</p>
<p>So let us embrace data analytics,<br>
And all that it has to offer us,<br>
For in its power and wisdom,<br>
Lies the path to our success,<br>
And the keys to a brighter future.</p>
</blockquote>
<p>I feel inspired.</p>
<p><em>“write a narcissistic sonnet about data analytics”</em></p>
</section>
<section id="a-narcissistic-sonnet-about-data-analytics" class="level2">
<h2 class="anchored" data-anchor-id="a-narcissistic-sonnet-about-data-analytics">A Narcissistic Sonnet About Data Analytics</h2>
<blockquote class="blockquote">
<p>Data analytics, a reflection of me,<br>
A never-ending stream of numbers that see,<br>
Into the depths of my soul,<br>
And reveal the truth about me whole,<br>
A mirror that shows me all that I can be.</p>
<p>With each passing day, my admiration grows,<br>
As I learn more and more from the data,<br>
It shows me my strengths and my weaknesses,<br>
And helps me to improve and progress,<br>
A faithful companion on my journey.</p>
<p>I am the master of data analytics,<br>
And it is mine to wield and command,<br>
With its power and its knowledge,<br>
I will conquer and prevail,<br>
And rise above all others in the land.</p>
<p>So let us celebrate data analytics,<br>
And all that it does for me,<br>
For in its numbers and its insights,<br>
Lies the key to my greatness,<br>
And the path to my ultimate victory.</p>
</blockquote>
<p><em>I am the master of data analytics</em></p>
<p>The path to my ultimate victory.</p>
<p>I can’t think of anything to add to that. That’s a wrap.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{linberg2022,
  author = {Steve Linberg},
  editor = {},
  title = {AI {Sonnets} on {Data} {Science}},
  date = {2022-12-02},
  url = {https://slinberg.net/posts/2022-12-02-sonnets},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-linberg2022" class="csl-entry quarto-appendix-citeas">
Steve Linberg. 2022. <span>“AI Sonnets on Data Science.”</span> December
2, 2022. <a href="https://slinberg.net/posts/2022-12-02-sonnets">https://slinberg.net/posts/2022-12-02-sonnets</a>.
</div></div></section></div> ]]></description>
  <category>AI</category>
  <category>ChatGPT</category>
  <category>data science</category>
  <guid>https://slinberg.net/posts/2022-12-02-sonnets/index.html</guid>
  <pubDate>Fri, 02 Dec 2022 05:00:00 GMT</pubDate>
  <media:content url="https://slinberg.net/posts/2022-12-02-sonnets/ChatGPT.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mastodon</title>
  <dc:creator>Steve Linberg</dc:creator>
  <link>https://slinberg.net/posts/2022-11-18-mastodon/index.html</link>
  <description><![CDATA[ 



<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="aside"><a href="https://fosstodon.org"><img src="https://slinberg.net/posts/2022-11-18-mastodon/https:/cdn.fosstodon.org/site_uploads/files/000/000/004/@1x/ec7a05be77b5390f.png" class="img-fluid" alt="Fosstodon logo"></a></span></div></div>
<p>I’m less than thrilled with late 2022 Twitter. Not a fan of the new administration; let’s just leave it at that. I’m worried about whether the academic API will survive the present melée, and whether it will be overrun with awfulness with the slashing of content moderators, or turned over to AI moderation systems which I can assert are not ready for the full-time job.</p>
<p>Anyway, one of the places Twitter refugees like me are flocking to is <a href="https://mastodon.org">Mastodon</a>. Danielle Navarro wrote up <a href="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/">a nice introduction</a> for data science folks like us, so I won’t go into the hows and whys here. The most important single point is that Mastodon is a federation of lots of servers, and you pick one (or more) to join, and then there are a few modes of viewing where you either see posts from just people you directly follow (“Home”), people on that server (“Local”), or everywhere (“Federated”, the Twitter-like “firehose” of everything all at once).</p>
<p>“Home” and “Federated” will give you basically the same thing on whichever server(s) you join, so your choice of server only impacts the “Local” view. I set up a personal account on <a href="https://mastodon.social">mastodon.social</a>, the biggest single server, out of some instinct that I should be on the biggest one for some reason. You don’t actually need to do that - and there are so many people on that server that the “Local” view is more or less useless. It’s fine, but there’s no advantage to being on a big server.</p>
<p><a href="https://fosstodon.org">Fosstodon</a> is oriented at open-source software and data, so it seemed like a good place to set up my professional/academic account. Took a few hours to get my account approved; I then signed up for <a href="https://www.patreon.com/fosstodon">their Patreon</a> to throw them a buck a month to help keep the lights on. Mastodon carries no ads, and isn’t owned by anybody. I love this, and would rather contribute a little to a product I use than to BE the product, which is the case in any “free,” ad-bearing social media.</p>
<p>The incomparable <a href="https://mastodon.social/@juliasilge@fosstodon.org">Julia Silge</a> is on Mastodon (and also at Fosstodon); that’s good enough for me. So is <a href="https://mastodon.social/@djnavarro@fosstodon.org">Danielle Navarro</a>, for that matter, and lots of other R and data luminaries. It’s been a long time since social media felt fun. Not missing the blue bird very much so far.</p>
<p>PS. Validate your username! Mine is <a href="https://fosstodon.org/@stevelinberg"><span class="citation" data-cites="stevelinberg">@stevelinberg</span><span class="citation" data-cites="fosstodon.org">@fosstodon.org</span></a>; add a text link to your Quarto site’s front page, like I did in my <a href="../../#contact">Contact section</a>, and be sure the <code>rel="me"</code> attribute is part of the link. The markdown for this (including the groovy Mastodon icon: ) is easy enough:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb1-1">{{&lt; fa brands mastodon title="mastodon" &gt;}}</span>
<span id="cb1-2">  [\@stevelinberg\@fosstodon.org](https://fosstodon.org/@stevelinberg){rel="me"}</span></code></pre></div>
<p>Don’t forget to escape the <code>@</code> symbols in the text part of the link. If you have header icons in your <code>_quarto.yml</code> as well, the entry looks like:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;">website</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">navbar</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">right</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">icon</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> mastodon</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">href</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> https://fosstodon.org/@stevelinberg</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">rel</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> me</span></span></code></pre></div>
<p>Easy peasy, lemon squeezy. (H/T to <a href="https://fosstodon.org/@MickaelCanouil">Mickaël CANOUIL</a> for <a href="https://fosstodon.org/@MickaelCanouil/109355167379296655">this tip</a> about <code>rel: me</code> in yml!)</p>
<p>Then go to your Mastodon’s account settings, and enter your website in one of the 4 metadata fields you get for links; the text on the right will give you the format for the link you need to verify your account with:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://slinberg.net/posts/2022-11-18-mastodon/settings.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">settings</figcaption><p></p>
</figure>
</div>
<p>Just be sure that <code>rel="me"</code> makes it in to your link, however you format it, and you’re golden.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{linberg2022,
  author = {Steve Linberg},
  editor = {},
  title = {Mastodon},
  date = {2022-11-18},
  url = {https://slinberg.net/posts/2022-11-18-mastodon},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-linberg2022" class="csl-entry quarto-appendix-citeas">
Steve Linberg. 2022. <span>“Mastodon.”</span> November 18, 2022. <a href="https://slinberg.net/posts/2022-11-18-mastodon">https://slinberg.net/posts/2022-11-18-mastodon</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>mastodon</category>
  <category>social media</category>
  <category>twitter</category>
  <category>quarto</category>
  <guid>https://slinberg.net/posts/2022-11-18-mastodon/index.html</guid>
  <pubDate>Fri, 18 Nov 2022 05:00:00 GMT</pubDate>
  <media:content url="https://cdn.fosstodon.org/site_uploads/files/000/000/004/@1x/ec7a05be77b5390f.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Hacked! (or not)</title>
  <dc:creator>Steve Linberg</dc:creator>
  <link>https://slinberg.net/posts/2022-10-31-hacked/index.html</link>
  <description><![CDATA[ 



<div class="page-columns page-full"><p></p><div class="no-row-height column-margin column-container"><span class="aside"><a href="https://www.somethingawful.com/hosted/jeffk/computarfunnys/comic-2.htm"><img src="https://slinberg.net/posts/2022-10-31-hacked/lunix.png" class="img-fluid" style="width:70.0%" alt="jeffk (nsfw)"></a></span></div></div>
<p>I thought this was pretty funny… some spam tonight that <em>this website’s database has been hacked</em>, and I better pay up some bitcoin or they’ll <code>destr0y [my] site's reputati0n</code>! Oh noes!</p>
<p>It takes some doing to hack the database of a site that <a href="https://quarto.org">doesn’t have a database</a>, let me tell you. Very impressive work guys! They must have fprotted my tarball with lunix.</p>
<p>Unfortunately my $5 in free bitcoin that I got a while back is only worth about $1.62 last time I looked. Guess they’re gonna keep my database on that <code>0ffsh0re server</code>. So it goes.</p>
<section id="the-bad-news" class="level2">
<h2 class="anchored" data-anchor-id="the-bad-news">The bad news</h2>
<blockquote class="blockquote">
<p>Your Site Has Been CompromisedY0ur Site Has Been Hacked</p>
<p>PLEASE FoRWARD THIS EMAIL T0 SoMEoNE IN Y0UR C0MPANY WHo iS ALL0WED To MAKE IMPORTANT DECISIoNS!</p>
<p>We have hacked y0ur website https://slinberg.net:443 and extracted your databases.</p>
<p>How did this happen?</p>
<p>our team has f0und a vulnerability within your site that we were able t0 exploit. After finding the vulnerability we were able to get y0ur database credentials and extract your entire database and m0ve the information to an 0ffsh0re server.</p>
<p>What does this mean?</p>
<p>We will systematically go through a series 0f steps 0f totally damaging your reputati0n. First your database will be leaked or s0ld to the highest bidder which they will use with whatever their intentions are. Next if there are e-mails f0und they will be e-mailed that their informati0n has been s0ld or leaked and your site https://slinberg.net:443 was at fault thusly damaging y0ur reputation and having angry customers/associates with whatever angry customers/associates do. Lastly any links that you have indexed in the search engines will be de-indexed based 0ff of blackhat techniques that we used in the past t0 de-index 0ur targets.</p>
<p>How d0 i st0p this?</p>
<p>We are willing to refrain from destr0ying y0ur site’s reputati0n for a small fee. The current fee is $3000 in bitcoins (0.15 BTC).</p>
<p>Please send the bitcoin to the f0llowing Bitcoin address (Copy and paste as it is case sensitive):</p>
<p>(yeah we won’t copy and paste this part)</p>
<p>0nce you have paid we will automatically get inf0rmed that it was your payment. Please note that you have t0 make payment within 3 days after opening this e-mail or the database leak, e-mails dispatched, and de-index 0f your site WiLL start!</p>
<p>How do i get Bitcoins?</p>
<p>Y0u can easily buy bitcoins via several websites or even offline from a Bitcoin-ATM.</p>
<p>What if i d0n’t pay?</p>
<p>if you decide not t0 pay, we will start the attack at the indicated date and uph0ld it until you do, there’s n0 counter measure t0 this, you will only end up wasting more m0ney trying to find a s0lution. We will completely destroy y0ur reputation am0ngst g00gle and your customers.</p>
<p>This is not a h0ax, d0 not reply t0 this email, don’t try to reas0n 0r negotiate, we will not read any replies. 0nce you have paid we will st0p what we were doing and y0u will never hear from us again!</p>
<p>Please n0te that Bitcoin is anonym0us and n0 0ne will find 0ut that y0u have complied. Finally don’t reply as this email is unm0nitored.</p>
</blockquote>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{linberg2022,
  author = {Steve Linberg},
  editor = {},
  title = {Hacked! (Or Not)},
  date = {2022-10-31},
  url = {https://slinberg.net/posts/2022-10-31-hacked},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-linberg2022" class="csl-entry quarto-appendix-citeas">
Steve Linberg. 2022. <span>“Hacked! (Or Not).”</span> October 31, 2022.
<a href="https://slinberg.net/posts/2022-10-31-hacked">https://slinberg.net/posts/2022-10-31-hacked</a>.
</div></div></section></div> ]]></description>
  <category>meta</category>
  <category>quarto</category>
  <guid>https://slinberg.net/posts/2022-10-31-hacked/index.html</guid>
  <pubDate>Mon, 31 Oct 2022 04:00:00 GMT</pubDate>
  <media:content url="https://slinberg.net/posts/2022-10-31-hacked/lunix.png" medium="image" type="image/png" height="202" width="144"/>
</item>
<item>
  <title>Porting to Quarto, part 2</title>
  <dc:creator>Steve Linberg</dc:creator>
  <link>https://slinberg.net/posts/2022-10-20_distill_to_quarto_part_2/index.html</link>
  <description><![CDATA[ 



<p>Here are a few more notes and tips on the transition to <a href="https://quarto.org">Quarto</a>, for other folks who may be grappling with it as well. You might reference <a href="../../posts/2022-10-01_distill_to_quarto_part_1/index.html">part one</a> as well.</p>
<section id="site-structure-and-categories" class="level2">
<h2 class="anchored" data-anchor-id="site-structure-and-categories">Site structure and categories</h2>
<p>This site is (presently) a mix of 3 general categories of content:</p>
<ol type="1">
<li>Static, once-off pages like <a href="../../steve.html">About</a> or the <a href="../../index.html">front page</a></li>
<li>Time-oriented narrative pages: the <a href="../../blog.html">blog</a></li>
<li>Academic stuff that is sort of in between, having chronology but usually a bit more substantive than blog posts, which can be short and more stream-of-consciousness</li>
</ol>
<p>There’s no real technical distinction between a blog post and a static page, except that Quarto includes functionality for grouping and listing blog posts by using various metadata added in posts’ <code>YAML</code> headers. One of the differences, though, is that blog posts can have categories; standard pages can’t. For this reason, I decided to treat the academic content as blog posts, to inherit the category functionality, but I wanted to keep them distinct from the blog section itself.</p>
<p>I spent a lot of time trying to solve the following problem, and have just come to the conclusion that I can’t. This happened in Distill, and was part of my motivation for moving to Quarto, and it turns out it’s the same situation in Quarto:</p>
<div class="callout callout callout-style-simple no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>Categories cannot be shared across sections.</p>
</div>
</div>
</div>
<p>I liked the idea of having categories on posts and pages on the site, as a non-hierarchical form of organization.<sup>1</sup> Basically, I assumed categories were tags, metadata that could be arbitrarily attached to content in various forms and places, and then used to navigate the site in other ways.</p>
<p>That’s not quite how it works. In Quarto, categories are metadata attached to documents, and they are only accessible from listing pages, like the <a href="../../blog.html">blog</a> page or the <a href="../../academics.html">academics</a> page. There isn’t a way to search a site for categories, and categories don’t cross-pollenate across sections (i.e.&nbsp;categories defined in blog posts won’t be accessible in listings for academics, and vice versa).</p>
<p>I spent a lot of time trying to find a workaround for this, and up until this morning I thought I was close. I made “academics” a subdirectory of “posts”, and did some gymnastics to keep the separate listing pages from combining the listings. I got all of that working, but in the end I noticed that the category clouds for the listing pages only consisted of the categories for the content it was showing, not all of the categories defined in the site.</p>
<p>So, I realized it’s just not going to work, and backed the <a href="../../academics.html">academics</a> page out of <code>/posts</code> and made it a parallel top-level structure. A lot of wasted time. Sigh.</p>
<p>We’ve come this far, though, so we’re committed now, and overall Quarto does feel cleaner and less reliant on hidden CLI voodoo than Distill. So we’ll just add a couple more notes and call it done.</p>
</section>
<section id="suppressing-stuff-on-blog-pages" class="level2">
<h2 class="anchored" data-anchor-id="suppressing-stuff-on-blog-pages">Suppressing stuff on blog pages</h2>
<p>When you make a blog post, you get a lot of additional stuff by default that is usually good, but which you may not always want.</p>
<p>In my initial attempt to solve the above problem, I had a directory structure like this for the academics section:</p>
<pre><code>academics/
academics/_metadata.yml
academics/index.qmd
academics/695M/
academics/697E/</code></pre>
<p>The file <code>index.qmd</code> was the listing page for the academics section, but it was treated as a blog post because it was inside the <code>academics</code> directory being listed. This meant that it inherited blog post things like author name, post date, citation information, license information, etc. That was fine for posts, but I didn’t want it all on this particular page.</p>
<p>Turning it all off took some doing, but the following fields in the YAML header did it:</p>
<table class="table">
<colgroup>
<col style="width: 26%">
<col style="width: 28%">
<col style="width: 45%">
</colgroup>
<thead>
<tr class="header">
<th>attribute</th>
<th>value</th>
<th>effect</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>citation</code></td>
<td><code>false</code></td>
<td>suppress the BibTex citation block at the bottom of the page</td>
</tr>
<tr class="even">
<td><code>license</code></td>
<td><code>""</code></td>
<td>suppress the “Reuse” header and license information.</td>
</tr>
<tr class="odd">
<td><code>title-block-style</code></td>
<td><code>none</code></td>
<td>turn off some of the header block information, but we still also need:</td>
</tr>
<tr class="even">
<td><code>date-format</code></td>
<td><code>""</code></td>
<td>supress the date header; also be sure NOT to have <code>date</code> in the header, or it will still be echoed</td>
</tr>
<tr class="odd">
<td><code>author</code></td>
<td><code>"[hidden text]{style='display:none'}"</code></td>
<td>the yuckiest hack of all; <code>author</code> can’t be blank, so the only thing we can do is put it in a <code>&lt;span&gt;</code> and use CSS to hide it.</td>
</tr>
</tbody>
</table>
<p>The raw code is:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;">citation</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">false</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">license</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">""</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">title-block-style</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> none</span></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">date-format</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">""</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">author</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"[hidden text]{style='display:none'}"</span></span></code></pre></div>
<p>For a visual reference, if we create a simple page like this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">title</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"A sample page"</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">description</span><span class="kw" style="color: #003B4F;">: </span><span class="ch" style="color: #20794D;">|</span></span>
<span id="cb3-4">  a sample page description</span>
<span id="cb3-5"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="at" style="color: #657422;">I don't want any extra stuff on this page!</span></span></code></pre></div>
<p>It will render like this:</p>
<p><img src="https://slinberg.net/posts/2022-10-20_distill_to_quarto_part_2/sample_1.png" class="img-fluid"></p>
<p>For a blog post, maybe that’s fine, but for an index page or something else, we might only want the title and body, shown in green, and not the stuff in red:</p>
<p><img src="https://slinberg.net/posts/2022-10-20_distill_to_quarto_part_2/sample_2.png" class="img-fluid"></p>
<p>The attributes listed above will remove this:</p>
<p><img src="https://slinberg.net/posts/2022-10-20_distill_to_quarto_part_2/sample_3.png" class="img-fluid"></p>
<p>Leaving us with this:</p>
<p><img src="https://slinberg.net/posts/2022-10-20_distill_to_quarto_part_2/sample_4.png" class="img-fluid"></p>
<p>Aaaahhhhh.</p>
</section>
<section id="redirecting-from-previous-urls" class="level2">
<h2 class="anchored" data-anchor-id="redirecting-from-previous-urls">Redirecting from previous URLs</h2>
<p><a href="https://www.w3.org/Provider/Style/URI">Cool URLs don’t change.</a></p>
<p>We said that back in 1998. Did anybody listen? Not really. Do any of your 25-year-old URLs still work like that one does? I doubt it. My point.</p>
<p>When you migrate your site, URLs are going to break. If you want bookmarks - or google results - to find their way to the pages that got moved around, instead of dropping your confused readers on your cute 404 page, you need to leave pointers from your old URLs to your new ones.</p>
<p>This can be a daunting project, depending on how many URLs you need to update, and there are several ways to do it. The best way involves having some control over the webserver that’s hosting your site, such as server-side rewrite rules or <code>.htaccess</code> files, because that doesn’t depend on the viewer’s browser to handle the issue that is really a server issue.</p>
<p>However, if you’re hosting somewhere where you don’t have that kind of control, the next-best way is to use <code>aliases</code> in the YAML header. It won’t work in all cases, but it’s a lot better than nothing.</p>
<p>So, for example, due to differences in the way the Quarto and Distill versions of this site were built, the academics listing page was at this address:</p>
<p><a href="https://slinberg.net/academics_list.html">https://slinberg.net/academics_list.html</a></p>
<p>And it is now:</p>
<p><a href="https://slinberg.net/academics.html">https://slinberg.net/academics.html</a></p>
<p>However, if you follow the old link, you’ll see that it still brings you to the right place. This is done with this in the header:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="fu" style="color: #4758AB;">aliases</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb4-2"><span class="at" style="color: #657422;">  </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"academics_list.html"</span></span></code></pre></div>
<p>What this actually does is tell Quarto to generate a file called <code>academics_list.html</code>, which contains a redirect to <code>academics.html</code>. This pollutes your directory a bit, and means you have to overlay the old directory structure into your current one, so it’s not ideal from a neatness perspective. However, it will work well enough in most cases.</p>
<p>So that’s a wrap on the migration process. Other Quarto goodness will follow as I uncover it.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I’m all about hierarchies, as I date from the very first days of the web when all sites were static, before server-side or client-side processing, and websites were nice, neat hierarchical cascades of directories, images and HTML pages. That’s still my mental concept for websites, even though it’s not strictly necessary anymore.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{linberg2022,
  author = {Steve Linberg},
  editor = {},
  title = {Porting to {Quarto,} Part 2},
  date = {2022-10-20},
  url = {https://slinberg.net/posts/2022-10-20_distill_to_quarto_part_2},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-linberg2022" class="csl-entry quarto-appendix-citeas">
Steve Linberg. 2022. <span>“Porting to Quarto, Part 2.”</span> October
20, 2022. <a href="https://slinberg.net/posts/2022-10-20_distill_to_quarto_part_2">https://slinberg.net/posts/2022-10-20_distill_to_quarto_part_2</a>.
</div></div></section></div> ]]></description>
  <category>quarto</category>
  <category>distill</category>
  <guid>https://slinberg.net/posts/2022-10-20_distill_to_quarto_part_2/index.html</guid>
  <pubDate>Thu, 20 Oct 2022 04:00:00 GMT</pubDate>
  <media:content url="https://slinberg.net/posts/2022-10-20_distill_to_quarto_part_2/quarto.png" medium="image" type="image/png" height="35" width="144"/>
</item>
<item>
  <title>Porting slinberg.net from Distill to Quarto</title>
  <dc:creator>Steve Linberg</dc:creator>
  <link>https://slinberg.net/posts/2022-10-01_distill_to_quarto_part_1/index.html</link>
  <description><![CDATA[ 



<p><a href="https://quarto.org">Quarto</a>: all the cool kids are doing it.</p>
<p>Setting aside the <em>whys</em>, this is a narrative of the <em>hows</em> - narrating the conversion of this site from Distill to Quarto as I go. This process was done with RStudio version 2022.07.1<sup>1</sup>.</p>
<section id="the-process-so-far" class="level2">
<h2 class="anchored" data-anchor-id="the-process-so-far">The process so far</h2>
<p>Up to this point, the steps have been:</p>
<ol type="1">
<li>Use RStudio to create a new “Quarto Website” project, which I inspiringly named <code>quarto-blog</code>, which will also be the Github repository name</li>
<li>Separately download the standalone <a href="https://quarto.org/docs/get-started/">Quarto CLI</a>, for purposes yet to be determined</li>
<li>Read a couple of the early Distill-to-Quarto narratives, such as
<ul>
<li><a href="https://karatsidhu.medium.com/converting-a-distill-website-to-quarto-35f2422d0b53">Karat Sidhu - Converting a distill website to Quarto</a></li>
<li><a href="https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/">Danielle Navarro - Porting a distill blog to quarto</a></li>
</ul></li>
<li>Set a few of the basic options in the site’s <code>_quarto.yml</code> file (<code>title</code>, <code>description</code>, <code>site-url</code>, etc)</li>
<li>Created this as-of-this-typing-unsaved blog post as a new Quarto Document inside the project</li>
<li>Check RStudio’s <code>Render on Save</code> option in the file header, which quickly rebuilds the skeletal site on saves (of this file)</li>
</ol>
</section>
<section id="creating-a-this-blog-post" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-this-blog-post">Creating a (this) blog post</h2>
<p>So one immediate difference in terms of workflow is that the Quarto CLI doesn’t have - as of version 1.1.251, anyway - commands for creating blog post files. In Distill, you would say <code>create_post("Foo")</code> in the RStudio console, and that would create a skeleton with some base infrastructure, some automatic date-fu, etc. It would be easy enough to build a quick utility for doing this, but I kind of like that a blog post appears to just be a file (OK, a directory with an <code>index.qmd</code> file) inside the top-level <code>posts</code> directory.</p>
<p>So I’m going to save this file in the path <code>posts/2022-10-01_distill_to_quarto_part_1/index.qmd</code>, and that’s all that’s needed to make it a blog post. Yes, I’m typing out the date and title by hand, which is slightly more tedious than Distill, but I also know there’s nothing special going on under the hood when I add this file.</p>
<p>Why name the folder …<code>distill_to_quarto_part_1</code> instead of just <code>distill_to_quarto</code>? Because I’m pretty sure I read somewhere that there’s a context where blog post titles can be disambiguated from their date prefixes, and so I want the title to be unique enough to withstand that if I add another similarly-titled post in the future. Not feeling super confident about this decision so far, but there it is.</p>
<p>(See That pesky first image in Appendix A below for the first snag: the first, or “listing”, image, and a pathname problem in Quarto.)</p>
</section>
<section id="getting-the-groovy-table-of-contents" class="level2">
<h2 class="anchored" data-anchor-id="getting-the-groovy-table-of-contents">Getting the groovy table of contents</h2>
<p>The table of contents (to the left in desktop mode) automatically appears once you have headers in the document structure. Each document’s (or post’s) title is rendered as an <code>h1</code> tag above the body, but you need to have at least one <code>h2</code> tag for the table of contents to appear.</p>
<p>To make this work in the <code>posts</code> directory (or presumably any directory), it needs to be specified in the directory’s <code>_metadata.yml</code> file (so in this case, <code>posts/_metadata.yml</code>) like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Default for table of contents</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">toc</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">toc-title</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Table of contents</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">toc-location</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> left</span></span></code></pre></div>
<p>I believe that was there by default; it could be moved over to the right if you wanted something else in the left margin, like a site directory or something.</p>
<section id="github-links" class="level3">
<h3 class="anchored" data-anchor-id="github-links">Github links</h3>
<p>At least in the default configuration, this is also where your github links configured for this specific page will appear. Unfortunately, that means they <em>won’t</em> appear if your document lacks <code>h2</code> tags, and consequently the table of contents isn’t built. I’d prefer to have these links appear regardless, and separate from the table of contents; putting that on my mental list of things to figure out.</p>
</section>
</section>
<section id="deleting-the-two-sample-posts" class="level2">
<h2 class="anchored" data-anchor-id="deleting-the-two-sample-posts">Deleting the two sample posts</h2>
<p>Now that this document is saved, establishing the blog structure, let’s nuke the two sample posts the site was initialized with; this, happily, is just a matter of deleting the directories <code>posts/post-with-code</code> and <code>welcome</code>.</p>
<p><img src="https://slinberg.net/posts/2022-10-01_distill_to_quarto_part_1/delete-posts.png" class="img-fluid"></p>
<p>Just deleting the directories re-renders the site, and they’re gone. Nice that there’s nothing else to that.</p>
<p>(Doing this did appear to confuse RStudio the next time I saved this file, though, and caused a new render process to start, stranding the prior preview tab in my browser and opening a new one. Still a few early-launch kinks to work out here, unsurprisingly…)</p>
<p>PS. <em>WHOA!</em> that image is way too big. Let’s scale it down. Change the … do we still call this snippet rmarkdown? … from this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="sc" style="color: #5E5E5E;">!</span>[](delete<span class="sc" style="color: #5E5E5E;">-</span>posts.png)</span></code></pre></div>
<p>to this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="sc" style="color: #5E5E5E;">!</span>[](delete<span class="sc" style="color: #5E5E5E;">-</span>posts.png){width<span class="ot" style="color: #003B4F;">=</span><span class="dv" style="color: #AD0000;">50</span>%}</span></code></pre></div>
<p><img src="https://slinberg.net/posts/2022-10-01_distill_to_quarto_part_1/delete-posts.png" class="img-fluid" style="width:50.0%"></p>
<p>That’s better. That was a screengrab from a high-res display, so downscaling it by 50% was the right approach.</p>
</section>
<section id="create-the-missing-repo-and-push" class="level2">
<h2 class="anchored" data-anchor-id="create-the-missing-repo-and-push">Create the missing repo and push</h2>
<p>This is all going fine, but I haven’t actually created the GitHub repo yet, so now it’s time to do that. Once I’m happy with how it looks, I’ll need to update the publishing process to unhook the <code>distill-blog</code> project from my domain and replace it with this one, but for now I just want to be able to push the project.</p>
<p>Created the public project as “quarto-blog”, and now from the terminal:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;">git</span> remote add origin git@github.com:stevelinberg/quarto-blog.git</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">git</span> add .</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"Initial commit"</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">git</span> push <span class="at" style="color: #657422;">-u</span> origin main</span></code></pre></div>
</section>
<section id="migrating-a-post-from-the-distill-blog" class="level2">
<h2 class="anchored" data-anchor-id="migrating-a-post-from-the-distill-blog">Migrating a post from the Distill blog</h2>
<p>Posts are just directories, so we’ll copy the last old post from the distill project into the <code>posts</code> directory and see what we need to do to make it work.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;">cp</span> <span class="at" style="color: #657422;">-r</span> ../distill-blog/_posts/2022-04-02-quickie-for-importing-tasks-to-omnifocus-3 posts/</span></code></pre></div>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note: if you’re a command-line wonk like me and not dragging-and-dropping in a UI, be careful not to include the trailing slash on the Distill post directory in the above command, or it will dump the contents of the old post’s directory into your <code>posts</code> directory, which is not what you want at all.</p>
</div>
</div>
<p>PS. groovy warning box above! Quarto is built on <a href="https://getbootstrap.com/docs/5.0/getting-started/introduction/">Bootstrap 5</a> (at present), which means we get yummy candy like that for free:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="sc" style="color: #5E5E5E;">:::</span>{.callout<span class="sc" style="color: #5E5E5E;">-</span>important}</span>
<span id="cb6-2">Note<span class="sc" style="color: #5E5E5E;">:</span> <span class="cf" style="color: #003B4F;">if</span> you<span class="st" style="color: #20794D;">'re...</span></span>
<span id="cb6-3"><span class="st" style="color: #20794D;">:::</span></span></code></pre></div>
<p>Anyway, now we’ve got the directory for a single Distill post copied into the Quarto <code>posts</code> directory, and we need to convert it so Quarto will render it. What do we need to do?</p>
<section id="delete-the-extraneous-files" class="level3">
<h3 class="anchored" data-anchor-id="delete-the-extraneous-files">1. Delete the extraneous files</h3>
<p>Here’s what we’ve got:</p>
<p><img src="https://slinberg.net/posts/2022-10-01_distill_to_quarto_part_1/old-post-files.png" class="img-fluid" style="width:50.0%"></p>
<p>This will vary a bit by post content, but of these, the two we want are the <code>.Rmd</code> file, which is the original blog post content from Distill, and the supporting <code>png</code> image. The <code>.html</code> file can go, and the <code>…_files</code> directory (full of Javascript files) can go.</p>
<p>Then we rename the .Rmd file to <code>index.qmd</code>, and we have this:</p>
<p><img src="https://slinberg.net/posts/2022-10-01_distill_to_quarto_part_1/updated-post-files.png" class="img-fluid" style="width:50.0%"></p>
</section>
<section id="update-the-posts-yaml-header" class="level3">
<h3 class="anchored" data-anchor-id="update-the-posts-yaml-header">2. Update the post’s YAML header</h3>
<p>The old YAML header for the Distill blog looks like this:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">title</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Quickie for importing tasks to OmniFocus 3"</span></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;">description</span><span class="kw" style="color: #003B4F;">: </span><span class="ch" style="color: #20794D;">|</span></span>
<span id="cb7-4">  Copy and paste formatted text to mass-create tasks.</span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;">author</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb7-6"><span class="at" style="color: #657422;">  </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Steve Linberg</span></span>
<span id="cb7-7"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">url</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> https://slinberg.net</span></span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;">date</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> 2022-04-02</span></span>
<span id="cb7-9"><span class="fu" style="color: #4758AB;">output</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb7-10"><span class="at" style="color: #657422;">  distill:</span><span class="fu" style="color: #4758AB;">:distill_article</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb7-11"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">self_contained</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">false</span></span>
<span id="cb7-12"><span class="fu" style="color: #4758AB;">preview</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> https://www.omnigroup.com/assets/img/icons/omnifocus-web@2x.png</span></span>
<span id="cb7-13"><span class="fu" style="color: #4758AB;">categories</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb7-14"><span class="at" style="color: #657422;">  </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> omnifocus</span></span>
<span id="cb7-15"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
<p>Some of this will work in Quarto, some stuff has to be changed or removed. The current, very simple header for this post is:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="fu" style="color: #4758AB;">title</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Porting slinberg.net from Distill to Quarto"</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">date</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"2022-10-01"</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;">categories</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">quarto</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> distill</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> blog</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;">image</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> quarto.png</span></span></code></pre></div>
<p>So we can keep <code>title</code> and <code>date</code> in the original header. I don’t remember why the optional <code>description</code> attribute led with a vertical bar and a newline; the <code>author</code> tag can be deleted, as it will inherit the default values from <code>posts/_metadata.yml</code>; the <code>output</code> section can be deleted, the <code>preview</code> attribute can get quoted and renamed to <code>image</code>, and the <code>categories</code> tag gets pulled up to a single line, a square-bracketed list of categories. I’m adding “blog” as a category to blog posts, so far, since it will give another option for filtering blog posts as separate from static content on the site; not totally sure this will be needed, but going with it for the moment.</p>
<p>The updated YAML header now looks like this:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;">title</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Quickie for importing tasks to OmniFocus 3"</span></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;">description</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Copy and paste formatted text to mass-create tasks."</span></span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;">date</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"2022-04-02"</span></span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;">image</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"https://www.omnigroup.com/assets/img/icons/omnifocus-web@2x.png"</span></span>
<span id="cb9-6"><span class="fu" style="color: #4758AB;">categories</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">blog</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> omnifocus</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb9-7"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
<p>The <code>description</code> attribute, if present, will be used instead of a content preview on the listing page.</p>
</section>
<section id="nuke-the-knitr-setup-block" class="level3">
<h3 class="anchored" data-anchor-id="nuke-the-knitr-setup-block">3. Nuke the <code>knitr</code> setup block</h3>
<p>(For the life of me, I cannot remember, figure out, or google how to quote markdown within markdown, so to make this render I’m changing the backticks to single-quotes:)</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="st" style="color: #20794D;">'''{r setup, include=FALSE}</span></span>
<span id="cb10-2"><span class="st" style="color: #20794D;">knitr::opts_chunk$set(echo = FALSE)</span></span>
<span id="cb10-3"><span class="st" style="color: #20794D;">'''</span></span></code></pre></div>
<p>Delete that block, and any other extraneous <code>knitr</code> stuff unless you know why you need it.</p>
<p>Save and render. For this post, we’re done; it’s in and looks good. The blog page now looks like this:</p>
<p><img src="https://slinberg.net/posts/2022-10-01_distill_to_quarto_part_1/post-import.png" class="img-fluid" style="width:50.0%"></p>
</section>
<section id="commit" class="level3">
<h3 class="anchored" data-anchor-id="commit">4. Commit!</h3>
<p>Don’t forget: <a href="https://deepsource.io/blog/git-best-practices/#3-commit-early-commit-often">commit early, commit often</a>:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="fu" style="color: #4758AB;">git</span> add posts/2022-04-02-quickie-for-importing-tasks-to-omnifocus-3/</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"migrate old post"</span></span></code></pre></div>
</section>
<section id="rinse-and-repeat" class="level3">
<h3 class="anchored" data-anchor-id="rinse-and-repeat">5. Rinse and repeat</h3>
<p>Now, do the same process with the rest of the posts. I don’t have that many to move, so doing it manually isn’t too tedious, but it could be scripted for a lot of content if needed.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note: by not renaming the post directory, and by virtue of the fact that both Distill and Quarto use <code>/posts</code> as the top level for blog posts by default, the URLs for the posts won’t change when we switch. It’s rude to break your working URLs when migrating (even though the number of humans who correctly care about this is vanishingly small), so this is good news. If your posts directory will be called something else, or basically if anything changes, you should set up redirects for your old URLs so they point to the new ones.</p>
</div>
</div>
</section>
</section>
<section id="optional-configure-for-github-pages" class="level2">
<h2 class="anchored" data-anchor-id="optional-configure-for-github-pages">(optional) Configure for Github Pages</h2>
<p>If you’re hosting on Github pages, there are a couple of additional things to do:</p>
<section id="set-output-to-docs" class="level3">
<h3 class="anchored" data-anchor-id="set-output-to-docs">1. Set output to “docs”</h3>
<p>By default, the site will render to the directory “_site”. Github Pages, where I’m presently hosting slinberg.net, publishes from the “docs” directory, so we need to tell Quarto to do that.</p>
<p>In <code>_quarto.yml</code>, add “output-dir: docs” to the <code>project</code> section, as shown:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb12-1"><span class="fu" style="color: #4758AB;">project</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb12-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">type</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> website</span></span>
<span id="cb12-3"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">output-dir</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> docs</span></span></code></pre></div>
<p>Rebuild the whole site from the terminal, in the root directory:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;">quarto</span> render</span></code></pre></div>
<p>Delete <code>_site</code> from your filesystem and repo, and add the “docs” directory:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="fu" style="color: #4758AB;">git</span> rm <span class="at" style="color: #657422;">-rf</span> _site</span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"Remove old _site directory"</span></span>
<span id="cb14-3"><span class="fu" style="color: #4758AB;">git</span> add docs</span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"Add docs directory"</span></span></code></pre></div>
</section>
<section id="create-and-commit-a-.nojekyll-file" class="level3">
<h3 class="anchored" data-anchor-id="create-and-commit-a-.nojekyll-file">2. Create and commit a .nojekyll file</h3>
<p>Github requires the presence of a file called <code>.nojekyll</code> to prevent rendering with Jekyll, Github’s site generation tool. Again, from your site’s root:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="fu" style="color: #4758AB;">touch</span> .nojekyll</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;">git</span> add .nojekyll</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"Add .nojekyll file"</span></span></code></pre></div>
</section>
<section id="create-the-cname-file-if-youre-using-a-custom-domain" class="level3">
<h3 class="anchored" data-anchor-id="create-the-cname-file-if-youre-using-a-custom-domain">3. Create the CNAME file if you’re using a custom domain</h3>
<p>If you are using a custom domain name (like slinberg.net), you must also create a file called <code>CNAME</code> in your site’s root, with the domain name in plain text followed by a carriage return. Of course, you also have to own the domain and have it pointed at Github correctly, a topic we’re not covering here. The domain name will not work correctly without this file.</p>
</section>
</section>
<section id="other-conversion-notes" class="level2">
<h2 class="anchored" data-anchor-id="other-conversion-notes">Other conversion notes</h2>
<p>Other unordered odds and end from the porting process:</p>
<section id="hashpipe-syntax" class="level3">
<h3 class="anchored" data-anchor-id="hashpipe-syntax">Hashpipe syntax</h3>
<p>One of the nice things about Quarto is much more readable chunk options via the “hashpipe” syntax (<code>#</code> = “hash”, <code>|</code> = “pipe”, so <code>#|</code> = “hashpipe” 🙄). For example, we can turn this heavy thing:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">{r echo<span class="ot" style="color: #003B4F;">=</span><span class="cn" style="color: #8f5902;">FALSE</span>, fig.cap<span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"Figure from </span></span>
<span id="cb16-2"><span class="st" style="color: #20794D;">[The Visual Display of Quantitative Information](https://www.edwardtufte.com/tufte/books_vdqi),</span></span>
<span id="cb16-3"><span class="st" style="color: #20794D;">p. 118"</span>, out.width<span class="ot" style="color: #003B4F;">=</span><span class="dv" style="color: #AD0000;">400</span>}</span>
<span id="cb16-4">knitr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">include_graphics</span>(<span class="st" style="color: #20794D;">"badgraphic.png"</span>)</span></code></pre></div>
<p>Into this more readable construct:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">{r}</span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;">#| echo: FALSE</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;">#| fig-cap: Figure from [The Visual Display of Quantitative Information](https://www.edwardtufte.com/tufte/books_vdqi), p. 118</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;">#| out.with: 400</span></span>
<span id="cb17-5">knitr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">include_graphics</span>(<span class="st" style="color: #20794D;">"badgraphic.png"</span>)</span></code></pre></div>
<p>… in <em>theory</em>.</p>
<p>In <em>practice</em>, as of this writing, there’s a <a href="https://github.com/rstudio/rstudio/issues/11708">bug</a> in Quarto that prevents this from working correctly in .qmd files, so… for the moment, we wait and keep it in the former style.</p>
</section>
<section id="rmd-files-still-render" class="level3">
<h3 class="anchored" data-anchor-id="rmd-files-still-render">.Rmd files still render</h3>
<p>I was a little surprised to see that my non-converted blog posts, copied straight over from the Distill blog and prior to the cleanup for Quarto, still rendered just fine. I guess that’s good, but I wasn’t expecting it. I’m still going to clean them up.</p>
</section>
</section>
<section id="continue-to-part-2" class="level2">
<h2 class="anchored" data-anchor-id="continue-to-part-2">Continue to part 2!</h2>
<p>More notes and commentary on the process can be found in <a href="../../posts/2022-10-20_distill_to_quarto_part_2">part 2</a> of this series.</p>
</section>
<section id="appendix-a-problems" class="level2">
<h2 class="anchored" data-anchor-id="appendix-a-problems">Appendix A: problems</h2>
<p>Rather than interrupt the basic narrative above, let’s stack the problems we hit along the way down here.</p>
<section id="that-pesky-first-image" class="level3">
<h3 class="anchored" data-anchor-id="that-pesky-first-image">That pesky first image</h3>
<p>One of the basic concepts in blogs and blog listings is the all-important thumbnail image that is used on the listing page.</p>
<p>There are basically two ways to implement this in Quarto: either explicitly specify it with the <code>image</code> atrribute in the YAML section of the post’s <code>index.qmd</code> file:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb18-1"><span class="fu" style="color: #4758AB;">image</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"image.jpg"</span></span></code></pre></div>
<p>or, omit this attribute, and in that case, Quarto will use the first image it finds in the post body (if any). The difference is: if you only want to use the image on the listing page, but not have it appear in the post itself, put it in the YAML header; if you want it to be used on both, then omit the YAML header and put it inline.</p>
<p>The problem is that if you do the latter, and the image is right at the start of the post (a header image, in other words), it will not render correctly if it happens to be within the range of the preview text (which doesn’t appear to be visibly configurable in Quarto, but it’s more or less the first line or two); this is because it doesn’t convert the filename path to a global path. It does in the listing itself, which is odd. You can see the result here, from one of the sample posts; the original code is:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">This is the first post <span class="cf" style="color: #003B4F;">in</span> a Quarto blog. Welcome<span class="sc" style="color: #5E5E5E;">!</span></span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="sc" style="color: #5E5E5E;">!</span>[](thumbnail.jpg)</span></code></pre></div>
<p>But it we reverse it to put the image above the text:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="sc" style="color: #5E5E5E;">!</span>[](thumbnail.jpg)</span>
<span id="cb20-2"></span>
<span id="cb20-3">This is the first post <span class="cf" style="color: #003B4F;">in</span> a Quarto blog. Welcome<span class="sc" style="color: #5E5E5E;">!</span></span></code></pre></div>
<p>We get this on the listing page:</p>
<p><img src="https://slinberg.net/posts/2022-10-01_distill_to_quarto_part_1/busted-image.png" class="img-fluid"></p>
<p>This is Quarto failing to adjust the image’s pathname in the listing, though it does render the image correctly to the right as part of the listing structure.</p>
<p>This can be worked around with the simple but ugly hack of fully specifying the image’s pathname, as in:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="sc" style="color: #5E5E5E;">!</span>[](<span class="sc" style="color: #5E5E5E;">/</span>posts<span class="sc" style="color: #5E5E5E;">/</span>post<span class="sc" style="color: #5E5E5E;">-</span>with<span class="sc" style="color: #5E5E5E;">-</span>code<span class="sc" style="color: #5E5E5E;">/</span>thumbnail.jpg)</span>
<span id="cb21-2"></span>
<span id="cb21-3">This is the first post <span class="cf" style="color: #003B4F;">in</span> a Quarto blog. Welcome<span class="sc" style="color: #5E5E5E;">!</span></span></code></pre></div>
<p>but</p>
<ol type="a">
<li>Gross, and</li>
<li>You probably don’t want an inline image from the body appearing in the listing preview anyway.</li>
</ol>
<p>Hopefully <a href="https://github.com/quarto-dev/quarto-cli/issues/2042">this issue</a> will get resolved at some point.</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>RStudio 2022.07.1+554 “Spotted Wakerobin” Release (7872775ebddc40635780ca1ed238934c3345c5de, 2022-07-22) for macOS Mozilla/5.0 (Macintosh; Intel Mac OS X 12_6_0) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.12.10 Chrome/69.0.3497.128 Safari/537.36, to be precise↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{linberg2022,
  author = {Steve Linberg},
  editor = {},
  title = {Porting Slinberg.net from {Distill} to {Quarto}},
  date = {2022-10-01},
  url = {https://slinberg.net/posts/2022-10-01_distill_to_quarto_part_1},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-linberg2022" class="csl-entry quarto-appendix-citeas">
Steve Linberg. 2022. <span>“Porting Slinberg.net from Distill to
Quarto.”</span> October 1, 2022. <a href="https://slinberg.net/posts/2022-10-01_distill_to_quarto_part_1">https://slinberg.net/posts/2022-10-01_distill_to_quarto_part_1</a>.
</div></div></section></div> ]]></description>
  <category>quarto</category>
  <category>distill</category>
  <guid>https://slinberg.net/posts/2022-10-01_distill_to_quarto_part_1/index.html</guid>
  <pubDate>Sat, 01 Oct 2022 04:00:00 GMT</pubDate>
  <media:content url="https://slinberg.net/posts/2022-10-01_distill_to_quarto_part_1/quarto.png" medium="image" type="image/png" height="35" width="144"/>
</item>
<item>
  <title>Quickie for importing tasks to OmniFocus 3</title>
  <dc:creator>Steve Linberg</dc:creator>
  <link>https://slinberg.net/posts/2022-04-02-quickie-for-importing-tasks-to-omnifocus-3/index.html</link>
  <description><![CDATA[ 



<p>I’ve been an <a href="https://www.omnigroup.com/omnifocus/">OmniFocus</a> user since version 1.0.</p>
<p>Well, sort of. I used it a ton in version 1.0 and then eventually stopped. Then I used it again a ton when version 2 came out, and then eventually stopped. It worked well when I really forced myself to use it, but eventually I’d run out of gas, and it always bugged me a bit that I couldn’t get a handle on why. I read David Allen’s “<a href="https://gettingthingsdone.com/">Getting Things Done</a>”, which it was inspired by, and it all made sense, but it still just had a lot of friction to keep using.</p>
<p>One of the problems, I now realize, was the notion of <em>contexts</em> - each to-do item could be assigned to one, <em>and only one</em>, context, like “online” or “supermarket” or “home”, describing the setting where a task could be done. The problem was that there were many tasks that could be done in multiple contexts, but no way to mark them as such. One user I talked with on one of the forums explained that the way to think about it was that I myself could be in multiple simultaneous contexts, like “home” and “online”, and that tasks that matched either of those would appear. It sort of made sense, but it still never felt natural and I eventually dropped it again.</p>
<p>I checked it out again in version 3, and the problem has been solved: contexts are gone, replaced by the much more versatile and familiar concept of <em>tags</em>. Tags can be freely defined, and any item can have as many tags as you want. So now I’m using it again and finding it much easier to get along with.</p>
<p>(I also really appreciate that there is the option to just pay for it straight up, though they also offer the odious subscription-based pricing that everybody except developers hates. There is upgrade pricing from prior versions that makes it more affordable. They also offer <a href="https://support.omnigroup.com/sales-educational-pricing/">educational pricing</a>, so between my educational pricing and upgrade discount, OF3 went from $99 to about $38. Sold.)</p>
<p>It’s full of really nice little interface touches that are almost invisible but that make life very pleasant. One of them is the ability to import tasks in <a href="https://guide.taskpaper.com/">TaskPaper</a> format, which is very straightforward. I needed to add a list of 24 assignments (sigh) to my inbox, one per day for the next 24 days. I had them typed out, and with the help of a few <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html">emacs macros</a> added due dates and tags, using the following format:</p>
<pre><code>- task description @tags(tag1, tag2) @due(YYYY-MM-DD HH:MM)</code></pre>
<p>So my full list was:</p>
<pre><code>- (ch 3) Simple linear regression @tags(Machine Learning, Homework) @due(2022-04-02 23:59)
- (ch 3) Multiple linear regression @tags(Machine Learning, Homework) @due(2022-04-03 23:59)
- (ch 4) Logistic regression @tags(Machine Learning, Homework) @due(2022-04-04 23:59)
- (ch 4) Multiple logistic regression @tags(Machine Learning, Homework) @due(2022-04-05 23:59)
- (ch 4) Linear discriminant analysis @tags(Machine Learning, Homework) @due(2022-04-06 23:59)
- (ch 4) Quadratic discriminant analysis @tags(Machine Learning, Homework) @due(2022-04-07 23:59)
- (ch 4) Naive Bayes @tags(Machine Learning, Homework) @due(2022-04-08 23:59)
- (ch 4) K-Nearest Neighbors @tags(Machine Learning, Homework) @due(2022-04-09 23:59)
- (ch 4) Poisson regression @tags(Machine Learning, Homework) @due(2022-04-10 23:59)
- (ch 5) Cross-validation @tags(Machine Learning, Homework) @due(2022-04-11 23:59)
- (ch 5) Bootstrap @tags(Machine Learning, Homework) @due(2022-04-12 23:59)
- (ch 6) Best subset selection @tags(Machine Learning, Homework) @due(2022-04-13 23:59)
- (ch 6) Stepwise selection @tags(Machine Learning, Homework) @due(2022-04-14 23:59)
- (ch 6) Ridge regression @tags(Machine Learning, Homework) @due(2022-04-15 23:59)
- (ch 6) Lasso @tags(Machine Learning, Homework) @due(2022-04-16 23:59)
- (ch 6) Principal component regression @tags(Machine Learning, Homework) @due(2022-04-17 23:59)
- (ch 8) Bagging @tags(Machine Learning, Homework) @due(2022-04-18 23:59)
- (ch 8) Random forests @tags(Machine Learning, Homework) @due(2022-04-19 23:59)
- (ch 8) Boosting @tags(Machine Learning, Homework) @due(2022-04-20 23:59)
- (ch 8) Bayesian Additive Regression Trees @tags(Machine Learning, Homework) @due(2022-04-21 23:59)
- (ch 9) Support Vector Machines @tags(Machine Learning, Homework) @due(2022-04-22 23:59)
- (ch 12) Principal component analysis @tags(Machine Learning, Homework) @due(2022-04-23 23:59)
- (ch 12) K-means clustering @tags(Machine Learning, Homework) @due(2022-04-24 23:59)
- (ch 12) Hierarchical clustering @tags(Machine Learning, Homework) @due(2022-04-25 23:59)</code></pre>
<p>Copy the entire list, and then just paste into the inbox, and voilà:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://slinberg.net/posts/2022-04-02-quickie-for-importing-tasks-to-omnifocus-3/of_inbox.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Inbox</figcaption><p></p>
</figure>
</div>
<p>Now the problem is I have to actually <em>do</em> all of those things. (But at least I can check off the top item for the new blog post.)</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{linberg2022,
  author = {Steve Linberg},
  editor = {},
  title = {Quickie for Importing Tasks to {OmniFocus} 3},
  date = {2022-04-02},
  url = {https://slinberg.net/posts/2022-04-02-quickie-for-importing-tasks-to-omnifocus-3},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-linberg2022" class="csl-entry quarto-appendix-citeas">
Steve Linberg. 2022. <span>“Quickie for Importing Tasks to OmniFocus
3.”</span> April 2, 2022. <a href="https://slinberg.net/posts/2022-04-02-quickie-for-importing-tasks-to-omnifocus-3">https://slinberg.net/posts/2022-04-02-quickie-for-importing-tasks-to-omnifocus-3</a>.
</div></div></section></div> ]]></description>
  <category>omnifocus</category>
  <guid>https://slinberg.net/posts/2022-04-02-quickie-for-importing-tasks-to-omnifocus-3/index.html</guid>
  <pubDate>Sat, 02 Apr 2022 04:00:00 GMT</pubDate>
  <media:content url="https://www.omnigroup.com/assets/img/icons/omnifocus-web@2x.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Tufte Takes No Prisoners</title>
  <dc:creator>Steve Linberg</dc:creator>
  <link>https://slinberg.net/posts/2022-03-05-tufte-takes-no-prisoners/index.html</link>
  <description><![CDATA[ 



<p>The gloves come off in in “Chartjunk”, chapter 5 of <a href="https://www.edwardtufte.com">Edward Tufte</a>’s “<a href="https://www.edwardtufte.com/tufte/books_vdqi">The Visual Display of Quantitative Information</a>”. Here I am, innocently beginning to think about a poster presentation I have coming up in a couple of months and to imagine design elements that will beautify the project and help make the information easier to understand, and then right in the first paragraph, Tufte drops this:</p>
<blockquote class="blockquote">
<p>Graphical decoration, which propers in technical publications as well as in commercial and media graphics, comes cheaper than the hard work required to produce intriguing numbers and secure evidence.</p>
</blockquote>
<p><em>…ouch.</em></p>
<p>OK, let’s not overreact: he’s not saying “don’t strive for beauty” here. The main point is that visual clutter in charts and graphs, which can take many forms, at best pollutes the message and obfuscates the data, and at worst might be used to (attempt to) conceal a lack of data. That’s fair. He then goes on to show many examples of charts rendered almost unintelligible by over-use of fill patterns, made simple by modern computer-generated graphing systems, pointless use of three-dimensional effects that don’t represent data, and heavy gridlines that visually compete with data points.</p>
<p>On the subject of graph paper, he doesn’t hold back:</p>
<blockquote class="blockquote">
<p>Most ready-made graph paper comes with a darkly printed grid. The reverse (unprinted) side should be used, for then the lines show through faintly and do not clutter the data. If the paper is heavily gridded on both sides, throw it out.</p>
</blockquote>
<p>A little further on, he shows this monstrosity:</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://slinberg.net/posts/2022-03-05-tufte-takes-no-prisoners/badgraphic.png" class="img-fluid figure-img" width="400"></p>
<p></p><figcaption class="figure-caption">Figure from <a href="https://www.edwardtufte.com/tufte/books_vdqi">The Visual Display of Quantitative Information</a>, p.&nbsp;118</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>…introduced by this utter decimation:</p>
<blockquote class="blockquote">
<p>A series of weird three-dimensional displays appearing in the magazine <em>American Education</em> in the 1970s delighted connoisseurs of the graphically preposterous. Here five colors report, almost by happenstance, only five pieces of data (since the division within each year adds to 100 percent). This may well be the worst graphic ever to find its way into print.</p>
</blockquote>
<p>On first read, I thought to myself: “<em>I</em> want to be a connoisseur of the graphically preposterous”. Then I thought it over a bit more and decided I wasn’t so sure.</p>
<p>In any event, I’m around the 2/3 point now in VDQI, enjoying many savagely entertaining examples of what <em>not</em> to do in the visual presentation of data. There are a few good examples scattered in as well, though with much lower overall frequency so far. Studying the wreckage of bad design can absolutely be educational, but with all due deference to the important work of learning from the mistakes of others, it is always easier to critique than to create. I am not “peeking ahead” out of sequence to see if he does this more in subsequent chapters; <em>Saturday Mornings with Tufte™</em> are deliberately slow and meditative, with a cup of coffee and no electronic devices or distractions. So far this has been an informative and educational read, and I’m looking forward to the rest of it and then to moving on to “<a href="https://www.edwardtufte.com/tufte/books_be">Beautiful Evidence</a>”. But I’m still planning to try to create something beautiful in my upcoming poster, and hopefully I can find a way to do that that would also dodge the well-deserved barbs aimed at the many failed efforts shown in this book.</p>
<hr>
<p>(<span id="graph_paper"><em>Endnote</em></span>: I am a big fan of graph paper, and although most of my note-taking these days is on the ipad, I still have a big physical stash of my favorite, <a href="https://www.whitelinespaper.com/">whitelines</a> (non-referral link):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://slinberg.net/posts/2022-03-05-tufte-takes-no-prisoners/whitelines.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">From one of my <a href="https://www.whitelinespaper.com/">whitelines</a> notebooks</figcaption><p></p>
</figure>
</div>
<p>It uses a light gray tone with white gridlines instead of black, <em>much</em> easier on the eyes.)</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{linberg2022,
  author = {Steve Linberg},
  editor = {},
  title = {Tufte {Takes} {No} {Prisoners}},
  date = {2022-03-05},
  url = {https://slinberg.net/posts/2022-03-05-tufte-takes-no-prisoners},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-linberg2022" class="csl-entry quarto-appendix-citeas">
Steve Linberg. 2022. <span>“Tufte Takes No Prisoners.”</span> March 5,
2022. <a href="https://slinberg.net/posts/2022-03-05-tufte-takes-no-prisoners">https://slinberg.net/posts/2022-03-05-tufte-takes-no-prisoners</a>.
</div></div></section></div> ]]></description>
  <category>tufte</category>
  <category>design</category>
  <guid>https://slinberg.net/posts/2022-03-05-tufte-takes-no-prisoners/index.html</guid>
  <pubDate>Sat, 05 Mar 2022 05:00:00 GMT</pubDate>
  <media:content url="https://slinberg.net/posts/2022-03-05-tufte-takes-no-prisoners/badgraphic.png" medium="image" type="image/png" height="239" width="144"/>
</item>
<item>
  <title>Playfair and the “Flatten the Curve” Graphic</title>
  <dc:creator>Steve Linberg</dc:creator>
  <link>https://slinberg.net/posts/2022-02-19-playfair-and-the-flatten-the-curve-graphic/index.html</link>
  <description><![CDATA[ 



<p>One of the good early tidbits from <a href="https://www.edwardtufte.com">Edward Tufte</a>’s “<a href="https://www.edwardtufte.com/tufte/books_vdqi">The Visual Display of Quantitative Information</a>” is this quote from Scottish political economist William Playfair’s 1786 book “The Commercial and Political Atlas”:</p>
<blockquote class="blockquote">
<p>Information, that is imperfectly acquired, is generally as imperfectly retained; and a man who has carefully investigated a printed table, finds, when done, that he has only a very faint and partial idea of what he has read; and that like a figure imprinted on sand, is soon totally erased and defaced.</p>
</blockquote>
<p>This speaks to the general principle, widely accepted now but less so at that time, that tables of data can be hard to interpret and understand, and that knowledge gained from them is fleeting. Deep truths revealed by diligent statistical analysis are of limited value if they can’t make themselves readily understood, and if they don’t stick in the minds of viewers.</p>
<p>One of the great recent triumphs of visual design was the justly-famous “Flatten the Curve” graphic that illustrated the need to keep the rates of COVID-19 transmission low enough that hospitals could keep up and not be overwhelmed. It actually originated from the CDC in a 2007 publication with a title only a career bureaucrat could love: “Interim Pre-Pandemic Planning Guidance : Community Strategy for Pandemic Influenza Mitigation in the United States : Early, Targeted, Layered Use of Nonpharmaceutical Interventions” <span class="citation" data-cites="centersfordiseasecontrolandpreventionu.s.InterimPrepandemicPlanning2007a">(Centers for Disease Control and Prevention (U.S.) 2007)</span>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://slinberg.net/posts/2022-02-19-playfair-and-the-flatten-the-curve-graphic/r6601a1f1.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">The CDC’s original “Flatten the Curve” graphic (2007)</figcaption><p></p>
</figure>
</div>
<p>Ponderous as the document’s title may be, this graphic nonetheless showed this nontrivial concept very well. The solid-colored curve was the bad scenario of an outbreak of a pandemic with no intervention, and the transparent curve was a view of squishing that outbreak down over time so that it would be more manageable.</p>
<p>As brilliant as the design was - far, far more effective than paragraphs of explanatory text with supporting tables of data - it was still a bit text-heavy, with two text axes and five chunks of (small) inline text that had to be read to fully understand its meaning, and similarly-colored curves showing the two different outcomes, so it wasn’t quite a glance-level chart that could be instantly understood. When COVID-19 hit in 2019, this graphic was popularized and went through many iterations of further simplification, to make its message as clear and impactful as possible. The New York Times published this version in 2020 <span class="citation" data-cites="robertsFlatteningCoronavirusCurve2020">(Roberts 2020)</span>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://slinberg.net/posts/2022-02-19-playfair-and-the-flatten-the-curve-graphic/nyt_curve.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">The NYT’s simplified graphic (2020)</figcaption><p></p>
</figure>
</div>
<p>This is even more effective: the text and colors are bold and easy to read, the axis text is simplified, there are only three elements of text in the graph (each only three words), and a third item has been added: a horizontal line indicating the healthcare system’s capacity. This is about as simple and direct as it’s possible to make this information. It communicated a complex problem in a way that could be instantly understood, by almost anyone, regardless of education levels. It may have saved millions of lives, by being shared around the world and absorbed into the collective human understanding of what needed to happen to make the pandemic as manageable as possible.</p>
<p>(Another very subtle and effective change was the rendering of both curves as slightly irregular in shape, as opposed to the mathematically perfect normal-distribution forms in the CDC’s original graphic; this would help to reinforce the notion that infection / hospitalization / death rates from the pandemic would not follow shapes that could be precisely predicted, though overall trends could still be forecast.)</p>
<p>Not every complex social phenomenon can be rendered into such an effective message, but good data science should always strive for this level of simplicity and clarity when the purpose is to communicate something important as broadly and effectively as possible.</p>




<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-centersfordiseasecontrolandpreventionu.s.InterimPrepandemicPlanning2007a" class="csl-entry">
Centers for Disease Control and Prevention (U.S.). 2007. <span>“Interim Pre-Pandemic Planning Guidance : Community Strategy for Pandemic Influenza Mitigation in the <span>United</span> <span>States</span> : Early, Targeted, Layered Use of Nonpharmaceutical Interventions.”</span> <a href="https://stacks.cdc.gov/view/cdc/11425">https://stacks.cdc.gov/view/cdc/11425</a>.
</div>
<div id="ref-robertsFlatteningCoronavirusCurve2020" class="csl-entry">
Roberts, Siobhan. 2020. <span>“Flattening the <span>Coronavirus</span> <span>Curve</span>.”</span> <em>The New York Times</em>, March. <a href="https://www.nytimes.com/article/flatten-curve-coronavirus.html">https://www.nytimes.com/article/flatten-curve-coronavirus.html</a>.
</div>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{linberg2022,
  author = {Steve Linberg},
  editor = {},
  title = {Playfair and the “{Flatten} the {Curve}” {Graphic}},
  date = {2022-02-19},
  url = {https://slinberg.net/posts/2022-02-19-playfair-and-the-flatten-the-curve-graphic},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-linberg2022" class="csl-entry quarto-appendix-citeas">
Steve Linberg. 2022. <span>“Playfair and the <span>‘Flatten the
Curve’</span> Graphic.”</span> February 19, 2022. <a href="https://slinberg.net/posts/2022-02-19-playfair-and-the-flatten-the-curve-graphic">https://slinberg.net/posts/2022-02-19-playfair-and-the-flatten-the-curve-graphic</a>.
</div></div></section></div> ]]></description>
  <category>tufte</category>
  <category>design</category>
  <guid>https://slinberg.net/posts/2022-02-19-playfair-and-the-flatten-the-curve-graphic/index.html</guid>
  <pubDate>Sat, 19 Feb 2022 05:00:00 GMT</pubDate>
  <media:content url="https://slinberg.net/posts/2022-02-19-playfair-and-the-flatten-the-curve-graphic/nyt_curve.png" medium="image" type="image/png" height="52" width="144"/>
</item>
<item>
  <title>Saturday mornings with Tufte</title>
  <dc:creator>Steve Linberg</dc:creator>
  <link>https://slinberg.net/posts/2022-02-05-saturday-mornings-with-tufte/index.html</link>
  <description><![CDATA[ 



<p>It takes a lot of sustained effort to build, maintain, and grow robust quantitative skills. Data science is hard, and it’s not enough to just have a wealth of formulas and statistical techniques committed to memory: data investigation requires instincts, which can only come as the hard-won results of a great deal of study, practice and inquiry.</p>
<p>As the world re-aligns itself around the tsunami of data that is already hitting us, though, we all know that quant-fu is only half the battle. Being able to manipulate and interpret data fluently is absolutely essential, but no less so is the ability to present and communicate it effectively. Data presentation skills are meaningless (and dangerous) if built atop a weak quantitative foundation, but all the quantitative skills in the world won’t save us if we can’t make the results of our work understandable.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://slinberg.net/posts/2022-02-05-saturday-mornings-with-tufte/tuftebooks.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Saturday reading</figcaption><p></p>
</figure>
</div>
<p>I’m taking a few hours every Saturday morning to read <a href="https://www.edwardtufte.com">Edward Tufte</a>’s “<a href="https://www.edwardtufte.com/tufte/books_vdqi">The Visual Display of Quantitative Information</a>” and “<a href="https://www.edwardtufte.com/tufte/books_be">Beautiful Evidence</a>”. I’m not far enough in yet to articulate his vision or integrate his concepts into my own work, but it has the feeling of a correct path that I’ve learned to recognize from early forays in other fields. A lot of it is about decluttering, stripping away what is superfluous to leave only what is essential, which is one aspect of great art.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://slinberg.net/posts/2022-02-05-saturday-mornings-with-tufte/vdqi_spread.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Sample page on time series</figcaption><p></p>
</figure>
</div>
<p>One of the things that I love about data science is that this principle is equally critical in both the quantitative and qualitative aspects of the field. Statistical and engineering skills help strip away unneeded or irrelevant data; information design skills help visually focus on the most important aspects of what remains, to deliver the message as clearly as possible.</p>
<p>(And, right out of the gate on page 1 of <em>VDQI</em>, as the cool kids call it, is an idea for a short quantitative project that I’ll take up in the next post.)</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://slinberg.net/posts/2022-02-05-saturday-mornings-with-tufte/vdqi_p1.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">VDQI p1</figcaption><p></p>
</figure>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{linberg2022,
  author = {Steve Linberg},
  editor = {},
  title = {Saturday Mornings with {Tufte}},
  date = {2022-02-05},
  url = {https://slinberg.net/posts/2022-02-05-saturday-mornings-with-tufte},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-linberg2022" class="csl-entry quarto-appendix-citeas">
Steve Linberg. 2022. <span>“Saturday Mornings with Tufte.”</span>
February 5, 2022. <a href="https://slinberg.net/posts/2022-02-05-saturday-mornings-with-tufte">https://slinberg.net/posts/2022-02-05-saturday-mornings-with-tufte</a>.
</div></div></section></div> ]]></description>
  <category>tufte</category>
  <category>design</category>
  <guid>https://slinberg.net/posts/2022-02-05-saturday-mornings-with-tufte/index.html</guid>
  <pubDate>Sat, 05 Feb 2022 05:00:00 GMT</pubDate>
  <media:content url="https://slinberg.net/posts/2022-02-05-saturday-mornings-with-tufte/tuftebooks.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pythagorean Theorem</title>
  <dc:creator>Steve Linberg</dc:creator>
  <link>https://slinberg.net/posts/2022-02-02-pythagorean-theorem/index.html</link>
  <description><![CDATA[ 



<p>How did I make it to <code>$adulthood * 2</code> without knowing that our old friend, the Pythagorean Theorem (<img src="https://latex.codecogs.com/png.latex?a%5E2%20+%20b%5E2%20=%20c%5E2">), works in any number of dimensions?</p>
<p>The Euclidean distance <img src="https://latex.codecogs.com/png.latex?d"> between the origin (<img src="https://latex.codecogs.com/png.latex?0,%200,%20%5Cdots%200">) and a point defined by <img src="https://latex.codecogs.com/png.latex?n"> coordinates <img src="https://latex.codecogs.com/png.latex?x"> is just</p>
<p><img src="https://latex.codecogs.com/png.latex?d%20=%20%5Csqrt%7Bx_1%5E2%20+%20x_2%5E2%20+%20%5Cdots%20+%20x_n%5E2%7D"></p>
<p>Add up all of the squares and take the square root. Dope-smack for me.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{linberg2022,
  author = {Steve Linberg},
  editor = {},
  title = {Pythagorean {Theorem}},
  date = {2022-02-02},
  url = {https://slinberg.net/posts/2022-02-02-pythagorean-theorem},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-linberg2022" class="csl-entry quarto-appendix-citeas">
Steve Linberg. 2022. <span>“Pythagorean Theorem.”</span> February 2,
2022. <a href="https://slinberg.net/posts/2022-02-02-pythagorean-theorem">https://slinberg.net/posts/2022-02-02-pythagorean-theorem</a>.
</div></div></section></div> ]]></description>
  <category>math</category>
  <guid>https://slinberg.net/posts/2022-02-02-pythagorean-theorem/index.html</guid>
  <pubDate>Wed, 02 Feb 2022 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Distill and Github Pages Setup</title>
  <dc:creator>Steve Linberg</dc:creator>
  <link>https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/index.html</link>
  <description><![CDATA[ 



<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>NOTE: Since this article was written, we have <a href="../../posts/2022-10-01_distill_to_quarto_part_1/index.html">migrated from Distill to Quarto</a>. We’ll leave this here in case it’s still helpful to anyone, but it’s not how the site is currently built.</p>
</div>
</div>
<p>This document contains a walkthrough of setting up a new <a href="https://rstudio.github.io/distill/">Distill</a> blog using <a href="https://www.rstudio.com/products/rstudio/">RStudio</a> and <a href="https://pages.github.com/">GitHub pages.</a> It’s the first in a series of articles for social scientists showing how to create, publish and update a website using these packages. This is a relatively easy way to set up a lightweight website that’s well-suited for blogging and writing articles, especially about and using R. Once it’s built, you maintain it using RStudio just like your other projects.</p>
<p>Although it’s intended to be complete, and not overly technical where avoidable, it does assume a modest level of comfort using basic tools like RStudio and GitHub. If you’re on Mac or Linux, you probably have <a href="https://git-scm.com/">git</a> built in already, but you might need to install it if you’re on Windows. That’s outside the scope of this article, but you can find information about it on the <a href="https://git-scm.com/download/win">Git for Windows download page</a>.</p>
<p>The very high-level overview of the process here is:</p>
<ol type="1">
<li>Create a new, empty GitHub repository that will contain your site</li>
<li>Create a new, empty RStudio project using the repository you just created</li>
<li>Install the Distill framework into this project</li>
<li>Configure and build the bare-bones, empty site and push it up to GitHub</li>
<li>Configure GitHub Pages to publish the site</li>
</ol>
<p>Once you’ve done that, you can begin writing content and publishing blogs, and spend time fine-tuning and tweaking your site. (You can also do that before setting up GitHub Pages if you want to wait to unveil it until it has more content and polish - as you prefer.)</p>
<p>Assuming you have git and RStudio installed, and a GitHub account created, you’re ready to proceed!</p>
<section id="create-new-github-repository" class="level2">
<h2 class="anchored" data-anchor-id="create-new-github-repository">Create new GitHub repository</h2>
<p>The first step is to create a new repository for the site. Log into GitHub and create a new repo:</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127115109.png" class="img-fluid"></p>
<p>Call it something sensible like “distill-blog”; make it public (unless you don’t want to) and add a <code>.gitignore</code> file using the <code>R</code> template (just to start things off). Also, if you haven’t already, change your <a href="https://github.com/settings/repositories">github repository settings</a> to use “main” as your default branch name instead of “master”.</p>
<p>We’ll come back in a bit to set up the Pages part, but for now we just want to get the project built and populated. We now have an empty Git repository sitting on GitHub, waiting to be used for something.</p>
</section>
<section id="create-a-new-rstudio-project-using-the-repository" class="level2">
<h2 class="anchored" data-anchor-id="create-a-new-rstudio-project-using-the-repository">Create a new RStudio project using the repository</h2>
<p>Now we’ll use our new, empty GitHub repository for our Distill blog. From RStudio, choose “File -&gt; New Project” and choose “Version Control”:</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127124549.png" class="img-fluid"></p>
<p>Choose “Git”:</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127124647.png" class="img-fluid"></p>
<p>Copy in the repository URL from your project (found as shown below):</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127125016.png" class="img-fluid"></p>
<p>Paste it into the <code>Repository URL</code> field in the wizard, choose where you want to store it on your computer, and I recommend checking <code>Open in new session</code> for a clean slate. Click “Create Project” to create it.</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127125055.png" class="img-fluid"></p>
<p>The empty project will open in a new RStudio window. RStudio has added 3 new files (actually three directories) to the skeleton created by Github, which initially only contains the skeleton <code>.gitignore</code> file:</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127130928.png" class="img-fluid"></p>
<p>RStudio adds the <code>.git</code> directory, the <code>.Rproj.user</code> directory, and the <code>distill-blog.Rproj</code> RStudio project file (it will be named with the “Project directory name” field from the final screen of the New Project Wizard).</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127131749.png" class="img-fluid"></p>
<p>The <code>.gitignore</code> file created by Github tells git to ignore the <code>.Rproj.user</code> directory (which contains local settings used by RStudio and which you don’t need to (and shouldn’t) share or publish), and the <code>.git</code> directory is part of every repository and contains the repository settings.</p>
<p>We want to keep github and RStudio in sync, generally speaking. More precisely, we want to keep <em>the repository</em> in sync between GitHub and RStudio. The local git repository doesn’t yet know about the project file <code>distill-blog.Rproj</code>, since RStudio added that after cloning the repository from GitHub, so a good first task is to add it to the local repository, and push it back up to GitHub to get it in sync, and make sure that that core pipeline is working, since we’ll be using it constantly.</p>
<p>Although there is a “Git” pane in the Environments panel, which shows that <code>distill-blog.Rproj</code> is ready for staging:</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127133207.png" class="img-fluid"></p>
<p>…I am an old-school curmudgeon and prefer to use the terminal for git commands, since not everything I normally do with git has a representation in this visual UI. In RStudio I have even remapped the shortcut control-backtick to the terminal for quick switching:</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127133440.png" class="img-fluid"></p>
<p>Within the terminal, typing <code>git status</code> will show that git doesn’t yet know about <code>distill-blog.Rpro</code>j:</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127133648.png" class="img-fluid"></p>
<p>This isn’t going to be a git tutorial, so we’re just going to add the file to the repo and push it back to github. If you get stuck in this process, pause here until you’re able to troubleshoot and continue.</p>
<p>The git commands to update the repository with are:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;">git</span> add .</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"Add RStudio project skeleton"</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">git</span> push</span></code></pre></div>
<p>(Note: the first command, <code>git add .</code>, says to add all files in the current directory to the repository. We could have explicitly typed <code>git add distill-blog.Rproj</code>, but (a) <code>git add .</code> is much faster, and (b) much easier in the steps below when we may not even know all of the files that need adding, and explicitly enumerating them could be troublesome and error-prone. Sometimes you want to be careful and specific about which files you’re staging, but that’s beyond the scope of this discussion, and we’re keeping it simple here.)</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;">[slinbergdistill-blog]</span> <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">main</span><span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">$</span> git add . </span>
<span id="cb2-2"><span class="ex" style="color: null;">[slinbergdistill-blog]</span> <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">main</span> +<span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">$</span> git commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"Add RStudio project skeleton"</span></span>
<span id="cb2-3"><span class="ex" style="color: null;">[main</span> 6c67d2d] Add RStudio project skeleton</span>
<span id="cb2-4"> <span class="ex" style="color: null;">1</span> file changed, 13 insertions<span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">+</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-5"> <span class="ex" style="color: null;">create</span> mode 100644 distill-blog.Rproj</span>
<span id="cb2-6"><span class="ex" style="color: null;">[slinbergdistill-blog]</span> <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">main</span><span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">$</span> git push </span>
<span id="cb2-7"><span class="ex" style="color: null;">Enter</span> passphrase for key <span class="st" style="color: #20794D;">'/Users/slinberg/.ssh/sfl_id_rsa'</span>: </span>
<span id="cb2-8"><span class="ex" style="color: null;">Enumerating</span> objects: 4, done.</span>
<span id="cb2-9"><span class="ex" style="color: null;">Counting</span> objects: 100% <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">4/4</span><span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">,</span> done.</span>
<span id="cb2-10"><span class="ex" style="color: null;">Delta</span> compression using up to 8 threads</span>
<span id="cb2-11"><span class="ex" style="color: null;">Compressing</span> objects: 100% <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">3/3</span><span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">,</span> done.</span>
<span id="cb2-12"><span class="ex" style="color: null;">Writing</span> objects: 100% <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">3/3</span><span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">,</span> 444 bytes <span class="kw" style="color: #003B4F;">|</span> <span class="ex" style="color: null;">444.00</span> KiB/s, done.</span>
<span id="cb2-13"><span class="ex" style="color: null;">Total</span> 3 <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">delta</span> 0<span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">,</span> reused 0 <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">delta</span> 0<span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">,</span> pack-reused 0</span>
<span id="cb2-14"><span class="ex" style="color: null;">To</span> github.com:stevelinberg/distill-blog.git</span>
<span id="cb2-15">   <span class="ex" style="color: null;">54aae63..6c67d2d</span>  main <span class="at" style="color: #657422;">-</span><span class="op" style="color: #5E5E5E;">&gt;</span> main </span></code></pre></div>
<p>After <code>git push</code> uploads the changes back to the GitHub repository, now if we flip back to GitHub and refresh the page, we’ll see that the project file has been added:</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127135410.png" class="img-fluid"></p>
<p>At this point, we have an empty RStudio project committed to a GitHub repository, but we don’t yet actually have any content. Now it’s time to create the Distill blog skeleton and add it to the repository.</p>
</section>
<section id="add-the-distill-skeleton-to-the-repository" class="level2">
<h2 class="anchored" data-anchor-id="add-the-distill-skeleton-to-the-repository">Add the Distill skeleton to the repository</h2>
<p>We will now manually (sort of) create the Distill skeleton. Although we could have created a new project of a Distill blog from the RStudio Create New Project wizard, it wouldn’t have had the GitHub repository, and we would have needed to add that and do the github setup separately. Six of one, half-dozen of the other, but instead we created the GitHub repository first instead, and we’ll add in Distill ourselves now. The end result should be the same.</p>
<p>(Note: these commands are entered in the RStudio Console, which looks a lot like the Terminal, but speaks a different language. They’re both areas where you type commands, but the difference is that the terminal is a shell that passes commands to the operating system, for doing things like creating directories, copying or deleting files, or issuing git commands, and the Console is an R-language construct that processes R commands. If you type an R command in the Terminal, or a shell command in the Console, they will both be confused and spit out an error message, but it won’t do any damage beyond that. A glance at the tab titles will quickly orient you.)</p>
<p>In the console, install the <code>distill</code> library if you haven’t yet (reinstalling it won’t do any harm):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"distill"</span>)</span>
<span id="cb3-2">trying URL <span class="st" style="color: #20794D;">'https://cran.rstudio.com/bin/macosx/contrib/4.1/distill_1.3.tgz'</span></span>
<span id="cb3-3">Content type <span class="st" style="color: #20794D;">'application/x-gzip'</span> length <span class="dv" style="color: #AD0000;">454710</span> <span class="fu" style="color: #4758AB;">bytes</span> (<span class="dv" style="color: #AD0000;">444</span> KB)</span>
<span id="cb3-4"><span class="sc" style="color: #5E5E5E;">==</span><span class="er" style="color: #AD0000;">================================================</span></span>
<span id="cb3-5">downloaded <span class="dv" style="color: #AD0000;">444</span> KB</span>
<span id="cb3-6"></span>
<span id="cb3-7"></span>
<span id="cb3-8">The downloaded binary packages are <span class="cf" style="color: #003B4F;">in</span></span>
<span id="cb3-9">    <span class="sc" style="color: #5E5E5E;">/</span>var<span class="sc" style="color: #5E5E5E;">/</span>folders<span class="sc" style="color: #5E5E5E;">/</span>jw<span class="sc" style="color: #5E5E5E;">/</span>rmjpk2xj7z7_8txfqrjz0jhr0000gn<span class="sc" style="color: #5E5E5E;">/</span>T<span class="sc" style="color: #5E5E5E;">/</span><span class="er" style="color: #AD0000;">/</span>RtmpjDcuEY<span class="sc" style="color: #5E5E5E;">/</span>downloaded_packages</span></code></pre></div>
<p>Then load the library, which you should also do as your first step (after opening the project) any time you work on it in the future:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">library</span>(distill)</span></code></pre></div>
<p>With the <code>distill</code> library loaded, we’re ready to create the site. One important point is that we’re going to create the site in the root of our project, rather than inside a subdirectory. There’s no need to bury it one level down, since it won’t be a subcomponent of another project. The first argument in the command below, <code>"."</code>, means to work in the current directory, which is set by default as the directory containing the <code>distill-blog.Rproj</code> file. The argument is the blog title (which can be changed later if needed, but if you can avoid needing to do that it saves a few braincells), and the final argument causes it to be built with support for GitHub Pages, which is where our blog will ultimately end up.</p>
<p>Here’s the command I ran for this blog:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fu" style="color: #4758AB;">create_blog</span>(<span class="st" style="color: #20794D;">"."</span>, <span class="st" style="color: #20794D;">"Steve Linberg"</span>, <span class="at" style="color: #657422;">gh_pages =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
<p>This takes a few seconds to run and creates a lot of new files. I like to go ahead and commit the project at this point as well, giving us a rollback point where we can wipe out changes we made and start over with a clean install if we get in trouble down the road. Switch back to the terminal, add all files in the directory, commit and push:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;">git</span> add .</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"Install Distill skeleton"</span></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;">git</span> push</span></code></pre></div>
<p>If we pop back over to GitHub and reload the repository view, we’ll see a lot of new files added:</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127160301.png" class="img-fluid"></p>
</section>
<section id="build-the-site" class="level2">
<h2 class="anchored" data-anchor-id="build-the-site">Build the site</h2>
<p>Before we do any further customizing, we can build the site and get it deploying on GitHub Pages. At this point, there’s nothing to see because the site hasn’t been built yet; doing the first build will construct the first blog post and the basic site skeleton.</p>
<p>When you create the Distill site in this way, RStudio doesn’t yet know that there is one, and so the Build tab may be missing in the Environment pane:</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127160912.png" class="img-fluid"></p>
<p>If so, quit RStudio and re-open the project file, and it will appear:</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127161112.png" class="img-fluid"></p>
<p>Click the Build tab and then “Build Website”:</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127161335.png" class="img-fluid"></p>
<p>It will grind for a few moments and do the first build, and present you with a glorious preview of your new blog in the Viewer panel:</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127161457.png" class="img-fluid"></p>
<p>Let’s commit this stage too, since a few new files were just created. Switch to the Terminal tab (ctrl + backtick) and issue these git commands:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;">git</span> add .</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"First build of site skeleton"</span></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;">git</span> push</span></code></pre></div>
<p>Breathtaking in its awesomeness, we are now ready to share it with the world!</p>
<p>OK, you might prefer to do some work on it before you unveil it, and that’s fine. When you’re ready, continue below. (Read the RStudio page <a href="https://rstudio.github.io/distill/blog.html?panelset=before-i-sleep">Creating a Blog</a> to learn the details of how Distill sites work, and how to add and customize content; like anything worth learning, it takes a bit of time, but the payoff will be your mighty blog powers.) In this case, we’re going to go ahead and pretend we’re done and test the deployment to make sure it all works.</p>
</section>
<section id="configuring-github-pages" class="level2">
<h2 class="anchored" data-anchor-id="configuring-github-pages">Configuring GitHub Pages</h2>
<p>Next, we need to go back to GitHub and get GitHub Pages working, so we can publish our site.</p>
<p>From your GutHub project page, as shown below:</p>
<ol type="1">
<li>Click “Settings”</li>
<li>On the left, click “Pages”</li>
<li>Under “Source”, set the branch to “main”</li>
<li>Set the folder to “/docs”</li>
<li>Click “Save”.</li>
</ol>
<p>(Note: ignore the “Choose a theme” button; it doesn’t apply to Distill projects.)</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127162652.png" class="img-fluid"></p>
<p>GitHub will show a success message (hopefully):</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127163030.png" class="img-fluid"></p>
<p>Note the “Custom domain” section at the bottom; we’ll return to that if/when we want to move the site to a custom domain. As it is, GitHub generates a URL for the site based on your GitHub username and the repo name. In this case, the address is <a href="https://stevelinberg.github.io/distill-blog/">https://stevelinberg.github.io/distill-blog/</a>. Click the link, and you should see your site:</p>
<p><img src="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted%20image%2020220127163306.png" class="img-fluid"></p>
<p>This means it’s live!</p>
<p>You could just go from here, if you’re content with the URL GitHub chose for you. Your basic workflow will be:</p>
<ul>
<li>Work on content in RStudio</li>
<li>Commit changes with git as you go</li>
<li>Build the site when you’re ready (or as often as you like)</li>
<li>Push the changes to GitHub, which publishes them to your site.</li>
</ul>
<p>If you want to brand a little more strongly and put the site on your own domain, continue with “Using a Custom Domain”, the next article in this series, coming soon.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{linberg2022,
  author = {Steve Linberg},
  editor = {},
  title = {Distill and {Github} {Pages} {Setup}},
  date = {2022-01-29},
  url = {https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-linberg2022" class="csl-entry quarto-appendix-citeas">
Steve Linberg. 2022. <span>“Distill and Github Pages Setup.”</span>
January 29, 2022. <a href="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup">https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup</a>.
</div></div></section></div> ]]></description>
  <category>distill</category>
  <category>github pages</category>
  <category>git</category>
  <category>rstudio</category>
  <guid>https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/index.html</guid>
  <pubDate>Sat, 29 Jan 2022 05:00:00 GMT</pubDate>
  <media:content url="https://slinberg.net/posts/2022-01-29_distill-and-github-pages-setup/Pasted image 20220127115109.png" medium="image" type="image/png" height="76" width="144"/>
</item>
</channel>
</rss>
